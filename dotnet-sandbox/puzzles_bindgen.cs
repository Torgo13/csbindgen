// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace CsBindgen
{
    public static unsafe partial class LibPuzzles
    {
#if UNITY_IOS && !UNITY_EDITOR
        const string __DllName = "__Internal";
#else
        const string __DllName = "puzzles";
#endif
        

        public const uint _VCRT_COMPILER_PREPROCESSOR = 1;
        public const uint _SAL_VERSION = 20;
        public const uint __SAL_H_VERSION = 180000000;
        public const uint _USE_DECLSPECS_FOR_SAL = 0;
        public const uint _USE_ATTRIBUTES_FOR_SAL = 0;
        public const uint _CRT_PACKING = 8;
        public const uint _HAS_EXCEPTIONS = 1;
        public const uint _STL_LANG = 0;
        public const uint _HAS_CXX17 = 0;
        public const uint _HAS_CXX20 = 0;
        public const uint _HAS_CXX23 = 0;
        public const uint _HAS_NODISCARD = 0;
        public const uint _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;
        public const uint _CRT_BUILD_DESKTOP_APP = 1;
        public const uint _ARGMAX = 100;
        public const uint _CRT_INT_MAX = 2147483647;
        public const uint _CRT_FUNCTIONS_REQUIRED = 1;
        public const uint _CRT_HAS_CXX17 = 0;
        public const uint _CRT_HAS_C11 = 1;
        public const uint _CRT_INTERNAL_NONSTDC_NAMES = 1;
        public const uint __STDC_SECURE_LIB__ = 200411;
        public const uint __GOT_SECURE_LIB__ = 200411;
        public const uint __STDC_WANT_SECURE_LIB__ = 1;
        public const uint _SECURECRT_FILL_BUFFER_PATTERN = 254;
        public const uint _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;
        public const uint _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;
        public const uint _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;
        public const uint _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;
        public const uint _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;
        public static ReadOnlySpan<byte> _CRT_INTERNAL_STDIO_SYMBOL_PREFIX => new byte[] { 0 };
        public const uint _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = 1;
        public const uint _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = 2;
        public const uint _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = 4;
        public const uint _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = 8;
        public const uint _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = 16;
        public const uint _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = 32;
        public const uint _CRT_INTERNAL_SCANF_SECURECRT = 1;
        public const uint _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = 2;
        public const uint _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = 4;
        public const uint BUFSIZ = 512;
        public const uint _NSTREAM_ = 512;
        public const uint _IOB_ENTRIES = 3;
        public const uint _IOFBF = 0;
        public const uint _IOLBF = 64;
        public const uint _IONBF = 4;
        public const uint L_tmpnam = 260;
        public const uint L_tmpnam_s = 260;
        public const uint SEEK_CUR = 1;
        public const uint SEEK_END = 2;
        public const uint SEEK_SET = 0;
        public const uint FILENAME_MAX = 260;
        public const uint FOPEN_MAX = 20;
        public const uint _SYS_OPEN = 20;
        public const uint TMP_MAX = 2147483647;
        public const uint TMP_MAX_S = 2147483647;
        public const uint _TMP_MAX_S = 2147483647;
        public const uint SYS_OPEN = 20;
        public const uint _MAX_ITOSTR_BASE16_COUNT = 9;
        public const uint _MAX_ITOSTR_BASE10_COUNT = 12;
        public const uint _MAX_ITOSTR_BASE8_COUNT = 12;
        public const uint _MAX_ITOSTR_BASE2_COUNT = 33;
        public const uint _MAX_LTOSTR_BASE16_COUNT = 9;
        public const uint _MAX_LTOSTR_BASE10_COUNT = 12;
        public const uint _MAX_LTOSTR_BASE8_COUNT = 12;
        public const uint _MAX_LTOSTR_BASE2_COUNT = 33;
        public const uint _MAX_ULTOSTR_BASE16_COUNT = 9;
        public const uint _MAX_ULTOSTR_BASE10_COUNT = 11;
        public const uint _MAX_ULTOSTR_BASE8_COUNT = 12;
        public const uint _MAX_ULTOSTR_BASE2_COUNT = 33;
        public const uint _MAX_I64TOSTR_BASE16_COUNT = 17;
        public const uint _MAX_I64TOSTR_BASE10_COUNT = 21;
        public const uint _MAX_I64TOSTR_BASE8_COUNT = 23;
        public const uint _MAX_I64TOSTR_BASE2_COUNT = 65;
        public const uint _MAX_U64TOSTR_BASE16_COUNT = 17;
        public const uint _MAX_U64TOSTR_BASE10_COUNT = 21;
        public const uint _MAX_U64TOSTR_BASE8_COUNT = 23;
        public const uint _MAX_U64TOSTR_BASE2_COUNT = 65;
        public const uint CHAR_BIT = 8;
        public const uint SCHAR_MAX = 127;
        public const uint UCHAR_MAX = 255;
        public const uint CHAR_MAX = 127;
        public const uint MB_LEN_MAX = 5;
        public const uint SHRT_MAX = 32767;
        public const uint USHRT_MAX = 65535;
        public const uint INT_MAX = 2147483647;
        public const uint UINT_MAX = 4294967295;
        public const uint LONG_MAX = 2147483647;
        public const uint ULONG_MAX = 4294967295;
        public const uint EXIT_SUCCESS = 0;
        public const uint EXIT_FAILURE = 1;
        public const uint _WRITE_ABORT_MSG = 1;
        public const uint _CALL_REPORTFAULT = 2;
        public const uint _OUT_TO_DEFAULT = 0;
        public const uint _OUT_TO_STDERR = 1;
        public const uint _OUT_TO_MSGBOX = 2;
        public const uint _REPORT_ERRMODE = 3;
        public const uint RAND_MAX = 32767;
        public const uint _CVTBUFSIZE = 349;
        public const uint _MAX_PATH = 260;
        public const uint _MAX_DRIVE = 3;
        public const uint _MAX_DIR = 256;
        public const uint _MAX_FNAME = 256;
        public const uint _MAX_EXT = 256;
        public const uint _MAX_ENV = 32767;
        public const uint __bool_true_false_are_defined = 1;
        public const uint false_ = 0;
        public const uint true_ = 1;
        public const double PI = 3.141592653589793;
        public const double ROOT2 = 1.4142135623730951;
        public const uint SOLVE_ANIMATES = 512;
        public const uint REQUIRE_RBUTTON = 1024;
        public const uint REQUIRE_NUMPAD = 2048;
        public const uint ALIGN_VNORMAL = 0;
        public const uint ALIGN_VCENTRE = 256;
        public const uint ALIGN_HLEFT = 0;
        public const uint ALIGN_HCENTRE = 1;
        public const uint ALIGN_HRIGHT = 2;
        public const uint FONT_FIXED = 0;
        public const uint FONT_VARIABLE = 1;
        public const uint HATCH_SLASH = 1;
        public const uint HATCH_BACKSLASH = 2;
        public const uint HATCH_HORIZ = 3;
        public const uint HATCH_VERT = 4;
        public const uint HATCH_PLUS = 5;
        public const uint HATCH_X = 6;
        public static ReadOnlySpan<byte> DEFAULT_STATUSBAR_TEXT => new byte[] { 85, 115, 101, 32, 115, 116, 97, 116, 117, 115, 95, 98, 97, 114, 40, 41, 32, 116, 111, 32, 102, 105, 108, 108, 32, 116, 104, 105, 115, 32, 105, 110, 46, 0 };
        public const int LEFT_BUTTON = 512;
        public const int MIDDLE_BUTTON = 513;
        public const int RIGHT_BUTTON = 514;
        public const int LEFT_DRAG = 515;
        public const int MIDDLE_DRAG = 516;
        public const int RIGHT_DRAG = 517;
        public const int LEFT_RELEASE = 518;
        public const int MIDDLE_RELEASE = 519;
        public const int RIGHT_RELEASE = 520;
        public const int CURSOR_UP = 521;
        public const int CURSOR_DOWN = 522;
        public const int CURSOR_LEFT = 523;
        public const int CURSOR_RIGHT = 524;
        public const int CURSOR_SELECT = 525;
        public const int CURSOR_SELECT2 = 526;
        public const int UI_LOWER_BOUND = 527;
        public const int UI_QUIT = 528;
        public const int UI_NEWGAME = 529;
        public const int UI_SOLVE = 530;
        public const int UI_UNDO = 531;
        public const int UI_REDO = 532;
        public const int UI_UPPER_BOUND = 533;
        public const int MOD_CTRL = 4096;
        public const int MOD_SHFT = 8192;
        public const int MOD_NUM_KEYPAD = 16384;
        public const int MOD_MASK = 28672;
        public const int C_STRING = 0;
        public const int C_CHOICES = 1;
        public const int C_BOOLEAN = 2;
        public const int C_END = 3;
        public const int PKR_QUIT = 0;
        public const int PKR_SOME_EFFECT = 1;
        public const int PKR_NO_EFFECT = 2;
        public const int PKR_UNUSED = 3;
        public const int CFG_SETTINGS = 0;
        public const int CFG_SEED = 1;
        public const int CFG_DESC = 2;
        public const int CFG_PREFS = 3;
        public const int CFG_FRONTEND_SPECIFIC = 4;


        [DllImport(__DllName, EntryPoint = "csbindgen_fgetwc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort fgetwc(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fputwc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort fputwc(ushort _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_getwc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort getwc(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_getwchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort getwchar();

        [DllImport(__DllName, EntryPoint = "csbindgen_fgetws", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort* fgetws(ushort* _Buffer, int _BufferCount, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fputws", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fputws(ushort* _Buffer, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_putwc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort putwc(ushort _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_putwchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort putwchar(ushort _Character);

        [DllImport(__DllName, EntryPoint = "csbindgen_ungetwc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort ungetwc(ushort _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_clearerr_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int clearerr_s(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fopen_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fopen_s(_iobuf** _Stream, byte* _FileName, byte* _Mode);

        [DllImport(__DllName, EntryPoint = "csbindgen_fread_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint fread_s(void* _Buffer, nuint _BufferSize, nuint _ElementSize, nuint _ElementCount, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_freopen_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int freopen_s(_iobuf** _Stream, byte* _FileName, byte* _Mode, _iobuf* _OldStream);

        [DllImport(__DllName, EntryPoint = "csbindgen_gets_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* gets_s(byte* _Buffer, nuint _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_tmpfile_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int tmpfile_s(_iobuf** _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_tmpnam_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int tmpnam_s(byte* _Buffer, nuint _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_clearerr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void clearerr(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fclose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fclose(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_feof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int feof(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_ferror", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ferror(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fflush", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fflush(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fgetc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fgetc(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fgetpos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fgetpos(_iobuf* _Stream, long* _Position);

        [DllImport(__DllName, EntryPoint = "csbindgen_fgets", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* fgets(byte* _Buffer, int _MaxCount, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _iobuf* fopen(byte* _FileName, byte* _Mode);

        [DllImport(__DllName, EntryPoint = "csbindgen_fputc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fputc(int _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fputs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fputs(byte* _Buffer, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong fread(void* _Buffer, ulong _ElementSize, ulong _ElementCount, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_freopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _iobuf* freopen(byte* _FileName, byte* _Mode, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fsetpos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fsetpos(_iobuf* _Stream, long* _Position);

        [DllImport(__DllName, EntryPoint = "csbindgen_fseek", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fseek(_iobuf* _Stream, CLong _Offset, int _Origin);

        [DllImport(__DllName, EntryPoint = "csbindgen_ftell", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong ftell(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fwrite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong fwrite(void* _Buffer, ulong _ElementSize, ulong _ElementCount, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_getc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getc(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_getchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getchar();

        [DllImport(__DllName, EntryPoint = "csbindgen_perror", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void perror(byte* _ErrorMessage);

        [DllImport(__DllName, EntryPoint = "csbindgen_putc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putc(int _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_putchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putchar(int _Character);

        [DllImport(__DllName, EntryPoint = "csbindgen_puts", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int puts(byte* _Buffer);

        [DllImport(__DllName, EntryPoint = "csbindgen_remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int remove(byte* _FileName);

        [DllImport(__DllName, EntryPoint = "csbindgen_rename", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int rename(byte* _OldFileName, byte* _NewFileName);

        [DllImport(__DllName, EntryPoint = "csbindgen_unlink", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int unlink(byte* _FileName);

        [DllImport(__DllName, EntryPoint = "csbindgen_rewind", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void rewind(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_setbuf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void setbuf(_iobuf* _Stream, byte* _Buffer);

        [DllImport(__DllName, EntryPoint = "csbindgen_setvbuf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int setvbuf(_iobuf* _Stream, byte* _Buffer, int _Mode, nuint _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_tmpfile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _iobuf* tmpfile();

        [DllImport(__DllName, EntryPoint = "csbindgen_tmpnam", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* tmpnam(byte* _Buffer);

        [DllImport(__DllName, EntryPoint = "csbindgen_ungetc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ungetc(int _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_tempnam", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* tempnam(byte* _Directory, byte* _FilePrefix);

        [DllImport(__DllName, EntryPoint = "csbindgen_fcloseall", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fcloseall();

        [DllImport(__DllName, EntryPoint = "csbindgen_fdopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _iobuf* fdopen(int _FileHandle, byte* _Format);

        [DllImport(__DllName, EntryPoint = "csbindgen_fgetchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fgetchar();

        [DllImport(__DllName, EntryPoint = "csbindgen_fileno", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fileno(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_flushall", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int flushall();

        [DllImport(__DllName, EntryPoint = "csbindgen_fputchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fputchar(int _Ch);

        [DllImport(__DllName, EntryPoint = "csbindgen_getw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getw(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_putw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putw(int _Ch, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_rmtmp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int rmtmp();

        [DllImport(__DllName, EntryPoint = "csbindgen_calloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* calloc(ulong _Count, ulong _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free(void* _Block);

        [DllImport(__DllName, EntryPoint = "csbindgen_malloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* malloc(ulong _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_realloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* realloc(void* _Block, ulong _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_bsearch_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* bsearch_s(void* _Key, void* _Base, nuint _NumOfElements, nuint _SizeOfElements, bsearch_s__CompareFunction_delegate _CompareFunction, void* _Context);

        [DllImport(__DllName, EntryPoint = "csbindgen_qsort_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void qsort_s(void* _Base, nuint _NumOfElements, nuint _SizeOfElements, qsort_s__CompareFunction_delegate _CompareFunction, void* _Context);

        [DllImport(__DllName, EntryPoint = "csbindgen_bsearch", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* bsearch(void* _Key, void* _Base, nuint _NumOfElements, nuint _SizeOfElements, bsearch__CompareFunction_delegate _CompareFunction);

        [DllImport(__DllName, EntryPoint = "csbindgen_qsort", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void qsort(void* _Base, nuint _NumOfElements, nuint _SizeOfElements, qsort__CompareFunction_delegate _CompareFunction);

        [DllImport(__DllName, EntryPoint = "csbindgen_lfind", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lfind(void* _Key, void* _Base, uint* _NumOfElements, uint _SizeOfElements, lfind__CompareFunction_delegate _CompareFunction);

        [DllImport(__DllName, EntryPoint = "csbindgen_lsearch", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lsearch(void* _Key, void* _Base, uint* _NumOfElements, uint _SizeOfElements, lsearch__CompareFunction_delegate _CompareFunction);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double wcstod(ushort* _String, ushort** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong wcstol(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstoll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long wcstoll(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstoul", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong wcstoul(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstoull", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong wcstoull(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double wcstold(ushort* _String, ushort** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float wcstof(ushort* _String, ushort** _EndPtr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void atexit_arg1_delegate();

        [DllImport(__DllName, EntryPoint = "csbindgen_atexit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int atexit(atexit_arg1_delegate arg1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void at_quick_exit_arg1_delegate();

        [DllImport(__DllName, EntryPoint = "csbindgen_at_quick_exit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int at_quick_exit(at_quick_exit_arg1_delegate arg1);

        [DllImport(__DllName, EntryPoint = "csbindgen_abs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int abs(int _Number);

        [DllImport(__DllName, EntryPoint = "csbindgen_labs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong labs(CLong _Number);

        [DllImport(__DllName, EntryPoint = "csbindgen_llabs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long llabs(long _Number);

        [DllImport(__DllName, EntryPoint = "csbindgen_div", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _div_t div(int _Numerator, int _Denominator);

        [DllImport(__DllName, EntryPoint = "csbindgen_ldiv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _ldiv_t ldiv(CLong _Numerator, CLong _Denominator);

        [DllImport(__DllName, EntryPoint = "csbindgen_lldiv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _lldiv_t lldiv(long _Numerator, long _Denominator);

        [DllImport(__DllName, EntryPoint = "csbindgen_srand", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void srand(uint _Seed);

        [DllImport(__DllName, EntryPoint = "csbindgen_rand", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int rand();

        [DllImport(__DllName, EntryPoint = "csbindgen_atof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double atof(byte* _String);

        [DllImport(__DllName, EntryPoint = "csbindgen_atoi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int atoi(byte* _String);

        [DllImport(__DllName, EntryPoint = "csbindgen_atol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong atol(byte* _String);

        [DllImport(__DllName, EntryPoint = "csbindgen_atoll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long atoll(byte* _String);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float strtof(byte* _String, byte** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double strtod(byte* _String, byte** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double strtold(byte* _String, byte** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong strtol(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtoll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long strtoll(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtoul", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong strtoul(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtoull", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong strtoull(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_mblen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int mblen(byte* _Ch, nuint _MaxCount);

        [DllImport(__DllName, EntryPoint = "csbindgen_mbtowc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int mbtowc(ushort* _DstCh, byte* _SrcCh, nuint _SrcSizeInBytes);

        [DllImport(__DllName, EntryPoint = "csbindgen_mbstowcs_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int mbstowcs_s(nuint* _PtNumOfCharConverted, ushort* _DstBuf, nuint _SizeInWords, byte* _SrcBuf, nuint _MaxCount);

        [DllImport(__DllName, EntryPoint = "csbindgen_mbstowcs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint mbstowcs(ushort* _Dest, byte* _Source, nuint _MaxCount);

        [DllImport(__DllName, EntryPoint = "csbindgen_wctomb", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int wctomb(byte* _MbCh, ushort _WCh);

        [DllImport(__DllName, EntryPoint = "csbindgen_wctomb_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int wctomb_s(int* _SizeConverted, byte* _MbCh, nuint _SizeInBytes, ushort _WCh);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstombs_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int wcstombs_s(nuint* _PtNumOfCharConverted, byte* _Dst, nuint _DstSizeInBytes, ushort* _Src, nuint _MaxCountInBytes);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstombs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint wcstombs(byte* _Dest, ushort* _Source, nuint _MaxCount);

        [DllImport(__DllName, EntryPoint = "csbindgen_getenv_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getenv_s(nuint* _RequiredCount, byte* _Buffer, nuint _BufferCount, byte* _VarName);

        [DllImport(__DllName, EntryPoint = "csbindgen_getenv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* getenv(byte* _VarName);

        [DllImport(__DllName, EntryPoint = "csbindgen_system", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int system(byte* _Command);

        [DllImport(__DllName, EntryPoint = "csbindgen_ecvt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ecvt(double _Value, int _DigitCount, int* _PtDec, int* _PtSign);

        [DllImport(__DllName, EntryPoint = "csbindgen_fcvt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* fcvt(double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign);

        [DllImport(__DllName, EntryPoint = "csbindgen_gcvt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* gcvt(double _Value, int _DigitCount, byte* _DstBuf);

        [DllImport(__DllName, EntryPoint = "csbindgen_itoa", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* itoa(int _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_ltoa", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ltoa(CLong _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_swab", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void swab(byte* _Buf1, byte* _Buf2, int _SizeInBytes);

        [DllImport(__DllName, EntryPoint = "csbindgen_ultoa", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ultoa(CULong _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_putenv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putenv(byte* _EnvString);

        [DllImport(__DllName, EntryPoint = "csbindgen_onexit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern onexit_return_delegate onexit(onexit__Func_delegate _Func);

        [DllImport(__DllName, EntryPoint = "csbindgen_preset_menu_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern preset_menu* preset_menu_new();

        [DllImport(__DllName, EntryPoint = "csbindgen_preset_menu_add_submenu", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern preset_menu* preset_menu_add_submenu(preset_menu* parent, byte* title);

        [DllImport(__DllName, EntryPoint = "csbindgen_preset_menu_add_preset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void preset_menu_add_preset(preset_menu* menu, byte* title, game_params* @params);

        [DllImport(__DllName, EntryPoint = "csbindgen_preset_menu_lookup_by_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern game_params* preset_menu_lookup_by_id(preset_menu* menu, int id);

        [DllImport(__DllName, EntryPoint = "csbindgen_fatal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void fatal(byte* fmt);

        [DllImport(__DllName, EntryPoint = "csbindgen_frontend_default_colour", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void frontend_default_colour(frontend* fe, float* output);

        [DllImport(__DllName, EntryPoint = "csbindgen_deactivate_timer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void deactivate_timer(frontend* fe);

        [DllImport(__DllName, EntryPoint = "csbindgen_activate_timer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void activate_timer(frontend* fe);

        [DllImport(__DllName, EntryPoint = "csbindgen_get_random_seed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void get_random_seed(void** randseed, int* randseedsize);

        [DllImport(__DllName, EntryPoint = "csbindgen_drawing_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern drawing* drawing_new(drawing_api* api, midend* me, void* handle);

        [DllImport(__DllName, EntryPoint = "csbindgen_drawing_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void drawing_free(drawing* dr);

        [DllImport(__DllName, EntryPoint = "csbindgen_draw_text", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void draw_text(drawing* dr, int x, int y, int fonttype, int fontsize, int align, int colour, byte* text);

        [DllImport(__DllName, EntryPoint = "csbindgen_draw_rect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void draw_rect(drawing* dr, int x, int y, int w, int h, int colour);

        [DllImport(__DllName, EntryPoint = "csbindgen_draw_line", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void draw_line(drawing* dr, int x1, int y1, int x2, int y2, int colour);

        [DllImport(__DllName, EntryPoint = "csbindgen_draw_polygon", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void draw_polygon(drawing* dr, int* coords, int npoints, int fillcolour, int outlinecolour);

        [DllImport(__DllName, EntryPoint = "csbindgen_draw_circle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void draw_circle(drawing* dr, int cx, int cy, int radius, int fillcolour, int outlinecolour);

        [DllImport(__DllName, EntryPoint = "csbindgen_draw_thick_line", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void draw_thick_line(drawing* dr, float thickness, float x1, float y1, float x2, float y2, int colour);

        [DllImport(__DllName, EntryPoint = "csbindgen_clip", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void clip(drawing* dr, int x, int y, int w, int h);

        [DllImport(__DllName, EntryPoint = "csbindgen_unclip", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void unclip(drawing* dr);

        [DllImport(__DllName, EntryPoint = "csbindgen_start_draw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void start_draw(drawing* dr);

        [DllImport(__DllName, EntryPoint = "csbindgen_draw_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void draw_update(drawing* dr, int x, int y, int w, int h);

        [DllImport(__DllName, EntryPoint = "csbindgen_end_draw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void end_draw(drawing* dr);

        [DllImport(__DllName, EntryPoint = "csbindgen_text_fallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* text_fallback(drawing* dr, byte** strings, int nstrings);

        [DllImport(__DllName, EntryPoint = "csbindgen_status_bar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void status_bar(drawing* dr, byte* text);

        [DllImport(__DllName, EntryPoint = "csbindgen_blitter_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern blitter* blitter_new(drawing* dr, int w, int h);

        [DllImport(__DllName, EntryPoint = "csbindgen_blitter_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void blitter_free(drawing* dr, blitter* bl);

        [DllImport(__DllName, EntryPoint = "csbindgen_blitter_save", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void blitter_save(drawing* dr, blitter* bl, int x, int y);

        [DllImport(__DllName, EntryPoint = "csbindgen_blitter_load", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void blitter_load(drawing* dr, blitter* bl, int x, int y);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_begin_doc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void print_begin_doc(drawing* dr, int pages);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_begin_page", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void print_begin_page(drawing* dr, int number);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_begin_puzzle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void print_begin_puzzle(drawing* dr, float xm, float xc, float ym, float yc, int pw, int ph, float wmm, float scale);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_end_puzzle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void print_end_puzzle(drawing* dr);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_end_page", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void print_end_page(drawing* dr, int number);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_end_doc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void print_end_doc(drawing* dr);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_get_colour", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void print_get_colour(drawing* dr, int colour, [MarshalAs(UnmanagedType.U1)] bool printing_in_colour, int* hatch, float* r, float* g, float* b);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_mono_colour", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int print_mono_colour(drawing* dr, int grey);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_grey_colour", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int print_grey_colour(drawing* dr, float grey);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_hatched_colour", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int print_hatched_colour(drawing* dr, int hatch);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_rgb_mono_colour", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int print_rgb_mono_colour(drawing* dr, float r, float g, float b, int mono);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_rgb_grey_colour", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int print_rgb_grey_colour(drawing* dr, float r, float g, float b, float grey);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_rgb_hatched_colour", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int print_rgb_hatched_colour(drawing* dr, float r, float g, float b, int hatch);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_line_width", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void print_line_width(drawing* dr, int width);

        [DllImport(__DllName, EntryPoint = "csbindgen_print_line_dotted", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void print_line_dotted(drawing* dr, [MarshalAs(UnmanagedType.U1)] bool dotted);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern midend* midend_new(frontend* fe, game* ourgame, drawing_api* drapi, void* drhandle);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_free(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_which_game", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern game* midend_which_game(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_set_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_set_params(midend* me, game_params* @params);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_get_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern game_params* midend_get_params(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_size(midend* me, int* x, int* y, [MarshalAs(UnmanagedType.U1)] bool user_size, double device_pixel_ratio);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_reset_tilesize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_reset_tilesize(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_new_game", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_new_game(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_restart_game", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_restart_game(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_stop_anim", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_stop_anim(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_process_key", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int midend_process_key(midend* me, int x, int y, int button);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_request_keys", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern key_label* midend_request_keys(midend* me, int* nkeys);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_current_key_label", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_current_key_label(midend* me, int button);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_force_redraw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_force_redraw(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_redraw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_redraw(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_colours", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float* midend_colours(midend* me, int* ncolours);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_freeze_timer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_freeze_timer(midend* me, float tprop);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_timer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_timer(midend* me, float tplus);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_get_presets", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern preset_menu* midend_get_presets(midend* me, int* id_limit);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_which_preset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int midend_which_preset(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_wants_statusbar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool midend_wants_statusbar(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_get_config", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern config_item* midend_get_config(midend* me, int which, byte** wintitle);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_set_config", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_set_config(midend* me, int which, config_item* cfg);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_game_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_game_id(midend* me, byte* id);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_get_game_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_get_game_id(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_get_random_seed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_get_random_seed(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_can_format_as_text_now", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool midend_can_format_as_text_now(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_text_format", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_text_format(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_solve", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_solve(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_status", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int midend_status(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_can_undo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool midend_can_undo(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_can_redo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool midend_can_redo(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_supersede_game_desc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_supersede_game_desc(midend* me, byte* desc, byte* privdesc);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_rewrite_statusbar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_rewrite_statusbar(midend* me, byte* text);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void midend_serialise_write_delegate(void* ctx, void* buf, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_serialise", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_serialise(midend* me, midend_serialise_write_delegate write, void* wctx);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate bool midend_deserialise_read_delegate(void* ctx, void* buf, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_deserialise", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_deserialise(midend* me, midend_deserialise_read_delegate read, void* rctx);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate bool midend_load_prefs_read_delegate(void* ctx, void* buf, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_load_prefs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_load_prefs(midend* me, midend_load_prefs_read_delegate read, void* rctx);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void midend_save_prefs_write_delegate(void* ctx, void* buf, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_save_prefs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_save_prefs(midend* me, midend_save_prefs_write_delegate write, void* wctx);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate bool identify_game_read_delegate(void* ctx, void* buf, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_identify_game", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* identify_game(byte** name, identify_game_read_delegate read, void* rctx);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void midend_request_id_changes_notify_delegate(void* arg1);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_request_id_changes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void midend_request_id_changes(midend* me, midend_request_id_changes_notify_delegate notify, void* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_get_cursor_location", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool midend_get_cursor_location(midend* me, int* x, int* y, int* w, int* h);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_print_puzzle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* midend_print_puzzle(midend* me, document* doc, [MarshalAs(UnmanagedType.U1)] bool with_soln);

        [DllImport(__DllName, EntryPoint = "csbindgen_midend_tilesize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int midend_tilesize(midend* me);

        [DllImport(__DllName, EntryPoint = "csbindgen_smalloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* smalloc(nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_srealloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* srealloc(void* p, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_sfree", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void sfree(void* p);

        [DllImport(__DllName, EntryPoint = "csbindgen_dupstr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* dupstr(byte* s);

        [DllImport(__DllName, EntryPoint = "csbindgen_free_cfg", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_cfg(config_item* cfg);

        [DllImport(__DllName, EntryPoint = "csbindgen_free_keys", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_keys(key_label* keys, int nkeys);

        [DllImport(__DllName, EntryPoint = "csbindgen_obfuscate_bitmap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void obfuscate_bitmap(byte* bmp, int bits, [MarshalAs(UnmanagedType.U1)] bool decode);

        [DllImport(__DllName, EntryPoint = "csbindgen_fgetline", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* fgetline(_iobuf* fp);

        [DllImport(__DllName, EntryPoint = "csbindgen_make_prefs_path", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* make_prefs_path(byte* dir, byte* sep, game* game, byte* suffix);

        [DllImport(__DllName, EntryPoint = "csbindgen_n_times_root_k", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int n_times_root_k(int n, int k);

        [DllImport(__DllName, EntryPoint = "csbindgen_bin2hex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* bin2hex(byte* in_, int inlen);

        [DllImport(__DllName, EntryPoint = "csbindgen_hex2bin", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* hex2bin(byte* in_, int outlen);

        [DllImport(__DllName, EntryPoint = "csbindgen_getenv_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getenv_bool(byte* name, int dflt);

        [DllImport(__DllName, EntryPoint = "csbindgen_colour_mix", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void colour_mix(float* src1, float* src2, float p, float* dst);

        [DllImport(__DllName, EntryPoint = "csbindgen_game_mkhighlight", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void game_mkhighlight(frontend* fe, float* ret, int background, int highlight, int lowlight);

        [DllImport(__DllName, EntryPoint = "csbindgen_game_mkhighlight_specific", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void game_mkhighlight_specific(frontend* fe, float* ret, int background, int highlight, int lowlight);

        [DllImport(__DllName, EntryPoint = "csbindgen_shuffle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void shuffle(void* array, int nelts, int eltsize, random_state* rs);

        [DllImport(__DllName, EntryPoint = "csbindgen_draw_rect_outline", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void draw_rect_outline(drawing* dr, int x, int y, int w, int h, int colour);

        [DllImport(__DllName, EntryPoint = "csbindgen_draw_rect_corners", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void draw_rect_corners(drawing* dr, int cx, int cy, int r, int col);

        [DllImport(__DllName, EntryPoint = "csbindgen_move_cursor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* move_cursor(int button, int* x, int* y, int maxw, int maxh, [MarshalAs(UnmanagedType.U1)] bool wrap, bool* visible);

        [DllImport(__DllName, EntryPoint = "csbindgen_c2pos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int c2pos(int w, int h, int cx, int cy);

        [DllImport(__DllName, EntryPoint = "csbindgen_c2diff", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int c2diff(int w, int h, int cx, int cy, int button);

        [DllImport(__DllName, EntryPoint = "csbindgen_pos2c", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void pos2c(int w, int h, int pos, int* cx, int* cy);

        [DllImport(__DllName, EntryPoint = "csbindgen_draw_text_outline", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void draw_text_outline(drawing* dr, int x, int y, int fonttype, int fontsize, int align, int text_colour, int outline_colour, byte* text);

        [DllImport(__DllName, EntryPoint = "csbindgen_copy_left_justified", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void copy_left_justified(byte* buf, nuint sz, byte* str_);

        [DllImport(__DllName, EntryPoint = "csbindgen_button2label", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* button2label(int button);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DSF* dsf_new(int size);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void dsf_free(DSF* dsf);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_copy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void dsf_copy(DSF* to, DSF* from);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_canonify", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int dsf_canonify(DSF* dsf, int n);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_equivalent", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool dsf_equivalent(DSF* dsf, int n1, int n2);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int dsf_size(DSF* dsf, int n);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_merge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void dsf_merge(DSF* dsf, int n1, int n2);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_new_min", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DSF* dsf_new_min(int size);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_minimal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int dsf_minimal(DSF* dsf, int n);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_new_flip", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DSF* dsf_new_flip(int size);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_merge_flip", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void dsf_merge_flip(DSF* dsf, int n1, int n2, [MarshalAs(UnmanagedType.U1)] bool flip);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_canonify_flip", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int dsf_canonify_flip(DSF* dsf, int n, bool* flip);

        [DllImport(__DllName, EntryPoint = "csbindgen_dsf_reinit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void dsf_reinit(DSF* dsf);

        [DllImport(__DllName, EntryPoint = "csbindgen_tdq_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern tdq* tdq_new(int n);

        [DllImport(__DllName, EntryPoint = "csbindgen_tdq_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void tdq_free(tdq* tdq);

        [DllImport(__DllName, EntryPoint = "csbindgen_tdq_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void tdq_add(tdq* tdq, int k);

        [DllImport(__DllName, EntryPoint = "csbindgen_tdq_remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int tdq_remove(tdq* tdq);

        [DllImport(__DllName, EntryPoint = "csbindgen_tdq_fill", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void tdq_fill(tdq* tdq);

        [DllImport(__DllName, EntryPoint = "csbindgen_domino_layout", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int* domino_layout(int w, int h, random_state* rs);

        [DllImport(__DllName, EntryPoint = "csbindgen_domino_layout_prealloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void domino_layout_prealloc(int w, int h, random_state* rs, int* grid, int* grid2, int* list);

        [DllImport(__DllName, EntryPoint = "csbindgen_random_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern random_state* random_new(byte* seed, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_random_copy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern random_state* random_copy(random_state* tocopy);

        [DllImport(__DllName, EntryPoint = "csbindgen_random_bits", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong random_bits(random_state* state, int bits);

        [DllImport(__DllName, EntryPoint = "csbindgen_random_upto", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong random_upto(random_state* state, CULong limit);

        [DllImport(__DllName, EntryPoint = "csbindgen_random_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void random_free(random_state* state);

        [DllImport(__DllName, EntryPoint = "csbindgen_random_state_encode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* random_state_encode(random_state* state);

        [DllImport(__DllName, EntryPoint = "csbindgen_random_state_decode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern random_state* random_state_decode(byte* input);

        [DllImport(__DllName, EntryPoint = "csbindgen_SHA_Init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void SHA_Init(SHA_State* s);

        [DllImport(__DllName, EntryPoint = "csbindgen_SHA_Bytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void SHA_Bytes(SHA_State* s, void* p, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_SHA_Final", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void SHA_Final(SHA_State* s, byte* output);

        [DllImport(__DllName, EntryPoint = "csbindgen_SHA_Simple", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void SHA_Simple(void* p, int len, byte* output);

        [DllImport(__DllName, EntryPoint = "csbindgen_document_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern document* document_new(int pw, int ph, float userscale);

        [DllImport(__DllName, EntryPoint = "csbindgen_document_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void document_free(document* doc);

        [DllImport(__DllName, EntryPoint = "csbindgen_document_add_puzzle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void document_add_puzzle(document* doc, game* game, game_params* par, game_ui* ui, game_state* st, game_state* st2);

        [DllImport(__DllName, EntryPoint = "csbindgen_document_npages", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int document_npages(document* doc);

        [DllImport(__DllName, EntryPoint = "csbindgen_document_begin", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void document_begin(document* doc, drawing* dr);

        [DllImport(__DllName, EntryPoint = "csbindgen_document_end", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void document_end(document* doc, drawing* dr);

        [DllImport(__DllName, EntryPoint = "csbindgen_document_print_page", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void document_print_page(document* doc, drawing* dr, int page_nr);

        [DllImport(__DllName, EntryPoint = "csbindgen_document_print", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void document_print(document* doc, drawing* dr);

        [DllImport(__DllName, EntryPoint = "csbindgen_ps_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern psdata* ps_init(_iobuf* outfile, [MarshalAs(UnmanagedType.U1)] bool colour);

        [DllImport(__DllName, EntryPoint = "csbindgen_ps_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ps_free(psdata* ps);

        [DllImport(__DllName, EntryPoint = "csbindgen_ps_drawing_api", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern drawing* ps_drawing_api(psdata* ps);

        [DllImport(__DllName, EntryPoint = "csbindgen_new_combi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _combi_ctx* new_combi(int r, int n);

        [DllImport(__DllName, EntryPoint = "csbindgen_reset_combi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void reset_combi(_combi_ctx* combi);

        [DllImport(__DllName, EntryPoint = "csbindgen_next_combi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _combi_ctx* next_combi(_combi_ctx* combi);

        [DllImport(__DllName, EntryPoint = "csbindgen_free_combi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_combi(_combi_ctx* combi);

        [DllImport(__DllName, EntryPoint = "csbindgen_divvy_rectangle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DSF* divvy_rectangle(int w, int h, int k, random_state* rs);

        [DllImport(__DllName, EntryPoint = "csbindgen_divvy_rectangle_attempt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DSF* divvy_rectangle_attempt(int w, int h, int k, random_state* rs);

        [DllImport(__DllName, EntryPoint = "csbindgen_findloop_new_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern findloopstate* findloop_new_state(int nvertices);

        [DllImport(__DllName, EntryPoint = "csbindgen_findloop_free_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void findloop_free_state(findloopstate* arg1);

        [DllImport(__DllName, EntryPoint = "csbindgen_findloop_run", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool findloop_run(findloopstate* state, int nvertices, findloop_run_neighbour_delegate neighbour, void* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_findloop_is_loop_edge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool findloop_is_loop_edge(findloopstate* state, int u, int v);

        [DllImport(__DllName, EntryPoint = "csbindgen_findloop_is_bridge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool findloop_is_bridge(findloopstate* pv, int u, int v, int* u_vertices, int* v_vertices);

        [DllImport(__DllName, EntryPoint = "csbindgen_arraysort_fn", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void arraysort_fn(void* array, nuint nmemb, nuint size, arraysort_fn_cmp_delegate cmp, void* ctx);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct _iobuf
    {
        public void* _Placeholder;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct _div_t
    {
        public int quot;
        public int rem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct _ldiv_t
    {
        public CLong quot;
        public CLong rem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct _lldiv_t
    {
        public long quot;
        public long rem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct frontend
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct midend
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct random_state
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct game_params
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct game_state
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct game_ui
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct game_drawstate
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct blitter
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct document
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct drawing
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct psdata
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct config_item
    {
        public byte* name;
        public byte* kw;
        public int type_;
        public config_item__bindgen_ty_1 u;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct config_item__bindgen_ty_1
    {
        [FieldOffset(0)]
        public config_item__bindgen_ty_1__bindgen_ty_1 @string;
        [FieldOffset(0)]
        public config_item__bindgen_ty_1__bindgen_ty_2 choices;
        [FieldOffset(0)]
        public config_item__bindgen_ty_1__bindgen_ty_3 boolean;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct config_item__bindgen_ty_1__bindgen_ty_1
    {
        public byte* sval;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct config_item__bindgen_ty_1__bindgen_ty_2
    {
        public byte* choicenames;
        public byte* choicekws;
        public int selected;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct config_item__bindgen_ty_1__bindgen_ty_3
    {
        [MarshalAs(UnmanagedType.U1)] public bool bval;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct preset_menu_entry
    {
        public byte* title;
        public game_params* @params;
        public preset_menu* submenu;
        public int id;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct preset_menu
    {
        public int n_entries;
        public int entries_size;
        public preset_menu_entry* entries;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct key_label
    {
        public byte* label;
        public int button;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct DSF
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct tdq
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct SHA_State
    {
        public fixed uint h[5];
        public fixed byte block[64];
        public int blkused;
        public uint lenhi;
        public uint lenlo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct _combi_ctx
    {
        public int r;
        public int n;
        public int nleft;
        public int total;
        public int* a;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct findloopstate
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct game
    {
        public byte* name;
        public byte* winhelp_topic;
        public byte* htmlhelp_topic;
        public void* default_params;
        public void* fetch_preset;
        public void* preset_menu;
        public void* decode_params;
        public void* encode_params;
        public void* free_params;
        public void* dup_params;
        [MarshalAs(UnmanagedType.U1)] public bool can_configure;
        public void* configure;
        public void* custom_params;
        public void* validate_params;
        public void* new_desc;
        public void* validate_desc;
        public void* new_game;
        public void* dup_game;
        public void* free_game;
        [MarshalAs(UnmanagedType.U1)] public bool can_solve;
        public void* solve;
        [MarshalAs(UnmanagedType.U1)] public bool can_format_as_text_ever;
        public void* can_format_as_text_now;
        public void* text_format;
        public void* get_prefs;
        public void* set_prefs;
        public void* new_ui;
        public void* free_ui;
        public void* encode_ui;
        public void* decode_ui;
        public void* request_keys;
        public void* changed_state;
        public void* current_key_label;
        public void* interpret_move;
        public void* execute_move;
        public int preferred_tilesize;
        public void* compute_size;
        public void* set_size;
        public void* colours;
        public void* new_drawstate;
        public void* free_drawstate;
        public void* redraw;
        public void* anim_length;
        public void* flash_length;
        public void* get_cursor_location;
        public void* status;
        [MarshalAs(UnmanagedType.U1)] public bool can_print;
        [MarshalAs(UnmanagedType.U1)] public bool can_print_in_colour;
        public void* print_size;
        public void* print;
        [MarshalAs(UnmanagedType.U1)] public bool wants_statusbar;
        [MarshalAs(UnmanagedType.U1)] public bool is_timed;
        public void* timing_state;
        public int flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct drawing_api
    {
        public void* draw_text;
        public void* draw_rect;
        public void* draw_line;
        public void* draw_polygon;
        public void* draw_circle;
        public void* draw_update;
        public void* clip;
        public void* unclip;
        public void* start_draw;
        public void* end_draw;
        public void* status_bar;
        public void* blitter_new;
        public void* blitter_free;
        public void* blitter_save;
        public void* blitter_load;
        public void* begin_doc;
        public void* begin_page;
        public void* begin_puzzle;
        public void* end_puzzle;
        public void* end_page;
        public void* end_doc;
        public void* line_width;
        public void* line_dotted;
        public void* text_fallback;
        public void* draw_thick_line;
    }



}
