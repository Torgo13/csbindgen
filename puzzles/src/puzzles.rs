/* automatically generated by rust-bindgen 0.69.4 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const PI: f64 = 3.141592653589793;
pub const ROOT2: f64 = 1.4142135623730951;
pub const SOLVE_ANIMATES: u32 = 512;
pub const REQUIRE_RBUTTON: u32 = 1024;
pub const REQUIRE_NUMPAD: u32 = 2048;
pub const ALIGN_VNORMAL: u32 = 0;
pub const ALIGN_VCENTRE: u32 = 256;
pub const ALIGN_HLEFT: u32 = 0;
pub const ALIGN_HCENTRE: u32 = 1;
pub const ALIGN_HRIGHT: u32 = 2;
pub const FONT_FIXED: u32 = 0;
pub const FONT_VARIABLE: u32 = 1;
pub const HATCH_SLASH: u32 = 1;
pub const HATCH_BACKSLASH: u32 = 2;
pub const HATCH_HORIZ: u32 = 3;
pub const HATCH_VERT: u32 = 4;
pub const HATCH_PLUS: u32 = 5;
pub const HATCH_X: u32 = 6;
pub const BLITTER_FROMSAVED: i32 = -1;
pub const DEFAULT_STATUSBAR_TEXT: &[u8; 34] = b"Use status_bar() to fill this in.\0";
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    const UNINIT: ::std::mem::MaybeUninit<_iobuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: usize,
        _Dir: *mut wchar_t,
        _DirCount: usize,
        _Filename: *mut wchar_t,
        _FilenameCount: usize,
        _Ext: *mut wchar_t,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    const UNINIT: ::std::mem::MaybeUninit<_div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<_lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    const UNINIT: ::std::mem::MaybeUninit<_LDOUBLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    const UNINIT: ::std::mem::MaybeUninit<_CRT_DOUBLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    const UNINIT: ::std::mem::MaybeUninit<_CRT_FLOAT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    const UNINIT: ::std::mem::MaybeUninit<_LONGDOUBLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    const UNINIT: ::std::mem::MaybeUninit<_LDBL12> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ld12) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
pub const LEFT_BUTTON: _bindgen_ty_1 = 512;
pub const MIDDLE_BUTTON: _bindgen_ty_1 = 513;
pub const RIGHT_BUTTON: _bindgen_ty_1 = 514;
pub const LEFT_DRAG: _bindgen_ty_1 = 515;
pub const MIDDLE_DRAG: _bindgen_ty_1 = 516;
pub const RIGHT_DRAG: _bindgen_ty_1 = 517;
pub const LEFT_RELEASE: _bindgen_ty_1 = 518;
pub const MIDDLE_RELEASE: _bindgen_ty_1 = 519;
pub const RIGHT_RELEASE: _bindgen_ty_1 = 520;
pub const CURSOR_UP: _bindgen_ty_1 = 521;
pub const CURSOR_DOWN: _bindgen_ty_1 = 522;
pub const CURSOR_LEFT: _bindgen_ty_1 = 523;
pub const CURSOR_RIGHT: _bindgen_ty_1 = 524;
pub const CURSOR_SELECT: _bindgen_ty_1 = 525;
pub const CURSOR_SELECT2: _bindgen_ty_1 = 526;
pub const UI_LOWER_BOUND: _bindgen_ty_1 = 527;
pub const UI_QUIT: _bindgen_ty_1 = 528;
pub const UI_NEWGAME: _bindgen_ty_1 = 529;
pub const UI_SOLVE: _bindgen_ty_1 = 530;
pub const UI_UNDO: _bindgen_ty_1 = 531;
pub const UI_REDO: _bindgen_ty_1 = 532;
pub const UI_UPPER_BOUND: _bindgen_ty_1 = 533;
pub const MOD_CTRL: _bindgen_ty_1 = 4096;
pub const MOD_SHFT: _bindgen_ty_1 = 8192;
pub const MOD_NUM_KEYPAD: _bindgen_ty_1 = 16384;
pub const MOD_MASK: _bindgen_ty_1 = 28672;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct frontend {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct midend {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct game_params {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct game_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct game_ui {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct game_drawstate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blitter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct document {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drawing {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct psdata {
    _unused: [u8; 0],
}
pub const C_STRING: _bindgen_ty_2 = 0;
pub const C_CHOICES: _bindgen_ty_2 = 1;
pub const C_BOOLEAN: _bindgen_ty_2 = 2;
pub const C_END: _bindgen_ty_2 = 3;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct config_item {
    pub name: *const ::std::os::raw::c_char,
    pub kw: *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub u: config_item__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union config_item__bindgen_ty_1 {
    pub string: config_item__bindgen_ty_1__bindgen_ty_1,
    pub choices: config_item__bindgen_ty_1__bindgen_ty_2,
    pub boolean: config_item__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct config_item__bindgen_ty_1__bindgen_ty_1 {
    pub sval: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_config_item__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<config_item__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<config_item__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<config_item__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct config_item__bindgen_ty_1__bindgen_ty_2 {
    pub choicenames: *const ::std::os::raw::c_char,
    pub choicekws: *const ::std::os::raw::c_char,
    pub selected: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_config_item__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<config_item__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<config_item__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<config_item__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).choicenames) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(choicenames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).choicekws) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(choicekws)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selected) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(selected)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct config_item__bindgen_ty_1__bindgen_ty_3 {
    pub bval: bool,
}
#[test]
fn bindgen_test_layout_config_item__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<config_item__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<config_item__bindgen_ty_1__bindgen_ty_3>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<config_item__bindgen_ty_1__bindgen_ty_3>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(bval)
        )
    );
}
#[test]
fn bindgen_test_layout_config_item__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<config_item__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<config_item__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(config_item__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<config_item__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(config_item__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).choices) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item__bindgen_ty_1),
            "::",
            stringify!(choices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boolean) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item__bindgen_ty_1),
            "::",
            stringify!(boolean)
        )
    );
}
#[test]
fn bindgen_test_layout_config_item() {
    const UNINIT: ::std::mem::MaybeUninit<config_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<config_item>(),
        48usize,
        concat!("Size of: ", stringify!(config_item))
    );
    assert_eq!(
        ::std::mem::align_of::<config_item>(),
        8usize,
        concat!("Alignment of ", stringify!(config_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item),
            "::",
            stringify!(kw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(config_item),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct preset_menu_entry {
    pub title: *mut ::std::os::raw::c_char,
    pub params: *mut game_params,
    pub submenu: *mut preset_menu,
    pub id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_preset_menu_entry() {
    const UNINIT: ::std::mem::MaybeUninit<preset_menu_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<preset_menu_entry>(),
        32usize,
        concat!("Size of: ", stringify!(preset_menu_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<preset_menu_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(preset_menu_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(preset_menu_entry),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(preset_menu_entry),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submenu) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(preset_menu_entry),
            "::",
            stringify!(submenu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(preset_menu_entry),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct preset_menu {
    pub n_entries: ::std::os::raw::c_int,
    pub entries_size: ::std::os::raw::c_int,
    pub entries: *mut preset_menu_entry,
}
#[test]
fn bindgen_test_layout_preset_menu() {
    const UNINIT: ::std::mem::MaybeUninit<preset_menu> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<preset_menu>(),
        16usize,
        concat!("Size of: ", stringify!(preset_menu))
    );
    assert_eq!(
        ::std::mem::align_of::<preset_menu>(),
        8usize,
        concat!("Alignment of ", stringify!(preset_menu))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_entries) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(preset_menu),
            "::",
            stringify!(n_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(preset_menu),
            "::",
            stringify!(entries_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(preset_menu),
            "::",
            stringify!(entries)
        )
    );
}
extern "C" {
    pub fn preset_menu_new() -> *mut preset_menu;
}
extern "C" {
    pub fn preset_menu_add_submenu(
        parent: *mut preset_menu,
        title: *mut ::std::os::raw::c_char,
    ) -> *mut preset_menu;
}
extern "C" {
    pub fn preset_menu_add_preset(
        menu: *mut preset_menu,
        title: *mut ::std::os::raw::c_char,
        params: *mut game_params,
    );
}
extern "C" {
    pub fn preset_menu_lookup_by_id(
        menu: *mut preset_menu,
        id: ::std::os::raw::c_int,
    ) -> *mut game_params;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_label {
    pub label: *mut ::std::os::raw::c_char,
    pub button: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_key_label() {
    const UNINIT: ::std::mem::MaybeUninit<key_label> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<key_label>(),
        16usize,
        concat!("Size of: ", stringify!(key_label))
    );
    assert_eq!(
        ::std::mem::align_of::<key_label>(),
        8usize,
        concat!("Alignment of ", stringify!(key_label))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(key_label),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(key_label),
            "::",
            stringify!(button)
        )
    );
}
extern "C" {
    pub fn fatal(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn frontend_default_colour(fe: *mut frontend, output: *mut f32);
}
extern "C" {
    pub fn deactivate_timer(fe: *mut frontend);
}
extern "C" {
    pub fn activate_timer(fe: *mut frontend);
}
extern "C" {
    pub fn get_random_seed(
        randseed: *mut *mut ::std::os::raw::c_void,
        randseedsize: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn drawing_new(
        api: *const drawing_api,
        me: *mut midend,
        handle: *mut ::std::os::raw::c_void,
    ) -> *mut drawing;
}
extern "C" {
    pub fn drawing_free(dr: *mut drawing);
}
extern "C" {
    pub fn draw_text(
        dr: *mut drawing,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fonttype: ::std::os::raw::c_int,
        fontsize: ::std::os::raw::c_int,
        align: ::std::os::raw::c_int,
        colour: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn draw_rect(
        dr: *mut drawing,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        colour: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn draw_line(
        dr: *mut drawing,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        colour: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn draw_polygon(
        dr: *mut drawing,
        coords: *const ::std::os::raw::c_int,
        npoints: ::std::os::raw::c_int,
        fillcolour: ::std::os::raw::c_int,
        outlinecolour: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn draw_circle(
        dr: *mut drawing,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        fillcolour: ::std::os::raw::c_int,
        outlinecolour: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn draw_thick_line(
        dr: *mut drawing,
        thickness: f32,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
        colour: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clip(
        dr: *mut drawing,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn unclip(dr: *mut drawing);
}
extern "C" {
    pub fn start_draw(dr: *mut drawing);
}
extern "C" {
    pub fn draw_update(
        dr: *mut drawing,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn end_draw(dr: *mut drawing);
}
extern "C" {
    pub fn text_fallback(
        dr: *mut drawing,
        strings: *const *const ::std::os::raw::c_char,
        nstrings: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn status_bar(dr: *mut drawing, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn blitter_new(
        dr: *mut drawing,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut blitter;
}
extern "C" {
    pub fn blitter_free(dr: *mut drawing, bl: *mut blitter);
}
extern "C" {
    pub fn blitter_save(
        dr: *mut drawing,
        bl: *mut blitter,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blitter_load(
        dr: *mut drawing,
        bl: *mut blitter,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn print_begin_doc(dr: *mut drawing, pages: ::std::os::raw::c_int);
}
extern "C" {
    pub fn print_begin_page(dr: *mut drawing, number: ::std::os::raw::c_int);
}
extern "C" {
    pub fn print_begin_puzzle(
        dr: *mut drawing,
        xm: f32,
        xc: f32,
        ym: f32,
        yc: f32,
        pw: ::std::os::raw::c_int,
        ph: ::std::os::raw::c_int,
        wmm: f32,
        scale: f32,
    );
}
extern "C" {
    pub fn print_end_puzzle(dr: *mut drawing);
}
extern "C" {
    pub fn print_end_page(dr: *mut drawing, number: ::std::os::raw::c_int);
}
extern "C" {
    pub fn print_end_doc(dr: *mut drawing);
}
extern "C" {
    pub fn print_get_colour(
        dr: *mut drawing,
        colour: ::std::os::raw::c_int,
        printing_in_colour: bool,
        hatch: *mut ::std::os::raw::c_int,
        r: *mut f32,
        g: *mut f32,
        b: *mut f32,
    );
}
extern "C" {
    pub fn print_mono_colour(
        dr: *mut drawing,
        grey: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_grey_colour(dr: *mut drawing, grey: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_hatched_colour(
        dr: *mut drawing,
        hatch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_rgb_mono_colour(
        dr: *mut drawing,
        r: f32,
        g: f32,
        b: f32,
        mono: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_rgb_grey_colour(
        dr: *mut drawing,
        r: f32,
        g: f32,
        b: f32,
        grey: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_rgb_hatched_colour(
        dr: *mut drawing,
        r: f32,
        g: f32,
        b: f32,
        hatch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_line_width(dr: *mut drawing, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn print_line_dotted(dr: *mut drawing, dotted: bool);
}
extern "C" {
    pub fn midend_new(
        fe: *mut frontend,
        ourgame: *const game,
        drapi: *const drawing_api,
        drhandle: *mut ::std::os::raw::c_void,
    ) -> *mut midend;
}
extern "C" {
    pub fn midend_free(me: *mut midend);
}
extern "C" {
    pub fn midend_which_game(me: *mut midend) -> *const game;
}
extern "C" {
    pub fn midend_set_params(me: *mut midend, params: *mut game_params);
}
extern "C" {
    pub fn midend_get_params(me: *mut midend) -> *mut game_params;
}
extern "C" {
    pub fn midend_size(
        me: *mut midend,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        user_size: bool,
        device_pixel_ratio: f64,
    );
}
extern "C" {
    pub fn midend_reset_tilesize(me: *mut midend);
}
extern "C" {
    pub fn midend_new_game(me: *mut midend);
}
extern "C" {
    pub fn midend_restart_game(me: *mut midend);
}
extern "C" {
    pub fn midend_stop_anim(me: *mut midend);
}
pub const PKR_QUIT: _bindgen_ty_3 = 0;
pub const PKR_SOME_EFFECT: _bindgen_ty_3 = 1;
pub const PKR_NO_EFFECT: _bindgen_ty_3 = 2;
pub const PKR_UNUSED: _bindgen_ty_3 = 3;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
extern "C" {
    pub fn midend_process_key(
        me: *mut midend,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        button: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn midend_request_keys(
        me: *mut midend,
        nkeys: *mut ::std::os::raw::c_int,
    ) -> *mut key_label;
}
extern "C" {
    pub fn midend_current_key_label(
        me: *mut midend,
        button: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_force_redraw(me: *mut midend);
}
extern "C" {
    pub fn midend_redraw(me: *mut midend);
}
extern "C" {
    pub fn midend_colours(me: *mut midend, ncolours: *mut ::std::os::raw::c_int) -> *mut f32;
}
extern "C" {
    pub fn midend_freeze_timer(me: *mut midend, tprop: f32);
}
extern "C" {
    pub fn midend_timer(me: *mut midend, tplus: f32);
}
extern "C" {
    pub fn midend_get_presets(
        me: *mut midend,
        id_limit: *mut ::std::os::raw::c_int,
    ) -> *mut preset_menu;
}
extern "C" {
    pub fn midend_which_preset(me: *mut midend) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn midend_wants_statusbar(me: *mut midend) -> bool;
}
pub const CFG_SETTINGS: _bindgen_ty_4 = 0;
pub const CFG_SEED: _bindgen_ty_4 = 1;
pub const CFG_DESC: _bindgen_ty_4 = 2;
pub const CFG_PREFS: _bindgen_ty_4 = 3;
pub const CFG_FRONTEND_SPECIFIC: _bindgen_ty_4 = 4;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
extern "C" {
    pub fn midend_get_config(
        me: *mut midend,
        which: ::std::os::raw::c_int,
        wintitle: *mut *mut ::std::os::raw::c_char,
    ) -> *mut config_item;
}
extern "C" {
    pub fn midend_set_config(
        me: *mut midend,
        which: ::std::os::raw::c_int,
        cfg: *mut config_item,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_game_id(
        me: *mut midend,
        id: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_get_game_id(me: *mut midend) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_get_random_seed(me: *mut midend) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_can_format_as_text_now(me: *mut midend) -> bool;
}
extern "C" {
    pub fn midend_text_format(me: *mut midend) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_solve(me: *mut midend) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_status(me: *mut midend) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn midend_can_undo(me: *mut midend) -> bool;
}
extern "C" {
    pub fn midend_can_redo(me: *mut midend) -> bool;
}
extern "C" {
    pub fn midend_supersede_game_desc(
        me: *mut midend,
        desc: *const ::std::os::raw::c_char,
        privdesc: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn midend_rewrite_statusbar(
        me: *mut midend,
        text: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_serialise(
        me: *mut midend,
        write: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut ::std::os::raw::c_void,
                buf: *const ::std::os::raw::c_void,
                len: ::std::os::raw::c_int,
            ),
        >,
        wctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn midend_deserialise(
        me: *mut midend,
        read: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut ::std::os::raw::c_void,
                buf: *mut ::std::os::raw::c_void,
                len: ::std::os::raw::c_int,
            ) -> bool,
        >,
        rctx: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_load_prefs(
        me: *mut midend,
        read: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut ::std::os::raw::c_void,
                buf: *mut ::std::os::raw::c_void,
                len: ::std::os::raw::c_int,
            ) -> bool,
        >,
        rctx: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_save_prefs(
        me: *mut midend,
        write: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut ::std::os::raw::c_void,
                buf: *const ::std::os::raw::c_void,
                len: ::std::os::raw::c_int,
            ),
        >,
        wctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn identify_game(
        name: *mut *mut ::std::os::raw::c_char,
        read: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut ::std::os::raw::c_void,
                buf: *mut ::std::os::raw::c_void,
                len: ::std::os::raw::c_int,
            ) -> bool,
        >,
        rctx: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_request_id_changes(
        me: *mut midend,
        notify: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn midend_get_cursor_location(
        me: *mut midend,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn midend_print_puzzle(
        me: *mut midend,
        doc: *mut document,
        with_soln: bool,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn midend_tilesize(me: *mut midend) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn srealloc(p: *mut ::std::os::raw::c_void, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sfree(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dupstr(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn free_cfg(cfg: *mut config_item);
}
extern "C" {
    pub fn free_keys(keys: *mut key_label, nkeys: ::std::os::raw::c_int);
}
extern "C" {
    pub fn obfuscate_bitmap(
        bmp: *mut ::std::os::raw::c_uchar,
        bits: ::std::os::raw::c_int,
        decode: bool,
    );
}
extern "C" {
    pub fn fgetline(fp: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn make_prefs_path(
        dir: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
        game: *const game,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn n_times_root_k(
        n: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin2hex(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn hex2bin(
        in_: *const ::std::os::raw::c_char,
        outlen: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn getenv_bool(
        name: *const ::std::os::raw::c_char,
        dflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn colour_mix(src1: *const f32, src2: *const f32, p: f32, dst: *mut f32);
}
extern "C" {
    pub fn game_mkhighlight(
        fe: *mut frontend,
        ret: *mut f32,
        background: ::std::os::raw::c_int,
        highlight: ::std::os::raw::c_int,
        lowlight: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn game_mkhighlight_specific(
        fe: *mut frontend,
        ret: *mut f32,
        background: ::std::os::raw::c_int,
        highlight: ::std::os::raw::c_int,
        lowlight: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn shuffle(
        array: *mut ::std::os::raw::c_void,
        nelts: ::std::os::raw::c_int,
        eltsize: ::std::os::raw::c_int,
        rs: *mut random_state,
    );
}
extern "C" {
    pub fn draw_rect_outline(
        dr: *mut drawing,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        colour: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn draw_rect_corners(
        dr: *mut drawing,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn move_cursor(
        button: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        maxw: ::std::os::raw::c_int,
        maxh: ::std::os::raw::c_int,
        wrap: bool,
        visible: *mut bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn c2pos(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c2diff(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        button: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pos2c(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
        cx: *mut ::std::os::raw::c_int,
        cy: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn draw_text_outline(
        dr: *mut drawing,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fonttype: ::std::os::raw::c_int,
        fontsize: ::std::os::raw::c_int,
        align: ::std::os::raw::c_int,
        text_colour: ::std::os::raw::c_int,
        outline_colour: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn copy_left_justified(
        buf: *mut ::std::os::raw::c_char,
        sz: usize,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn button2label(button: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DSF {
    _unused: [u8; 0],
}
extern "C" {
    pub fn dsf_new(size: ::std::os::raw::c_int) -> *mut DSF;
}
extern "C" {
    pub fn dsf_free(dsf: *mut DSF);
}
extern "C" {
    pub fn dsf_copy(to: *mut DSF, from: *mut DSF);
}
extern "C" {
    pub fn dsf_canonify(dsf: *mut DSF, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsf_equivalent(
        dsf: *mut DSF,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn dsf_size(dsf: *mut DSF, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsf_merge(dsf: *mut DSF, n1: ::std::os::raw::c_int, n2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dsf_new_min(size: ::std::os::raw::c_int) -> *mut DSF;
}
extern "C" {
    pub fn dsf_minimal(dsf: *mut DSF, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsf_new_flip(size: ::std::os::raw::c_int) -> *mut DSF;
}
extern "C" {
    pub fn dsf_merge_flip(
        dsf: *mut DSF,
        n1: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
        flip: bool,
    );
}
extern "C" {
    pub fn dsf_canonify_flip(
        dsf: *mut DSF,
        n: ::std::os::raw::c_int,
        flip: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsf_reinit(dsf: *mut DSF);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tdq {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tdq_new(n: ::std::os::raw::c_int) -> *mut tdq;
}
extern "C" {
    pub fn tdq_free(tdq: *mut tdq);
}
extern "C" {
    pub fn tdq_add(tdq: *mut tdq, k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tdq_remove(tdq: *mut tdq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tdq_fill(tdq: *mut tdq);
}
extern "C" {
    pub fn domino_layout(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rs: *mut random_state,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn domino_layout_prealloc(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rs: *mut random_state,
        grid: *mut ::std::os::raw::c_int,
        grid2: *mut ::std::os::raw::c_int,
        list: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub static mut ver: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn random_new(
        seed: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut random_state;
}
extern "C" {
    pub fn random_copy(tocopy: *mut random_state) -> *mut random_state;
}
extern "C" {
    pub fn random_bits(
        state: *mut random_state,
        bits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn random_upto(
        state: *mut random_state,
        limit: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn random_free(state: *mut random_state);
}
extern "C" {
    pub fn random_state_encode(state: *mut random_state) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn random_state_decode(input: *const ::std::os::raw::c_char) -> *mut random_state;
}
pub type uint32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SHA_State {
    pub h: [uint32; 5usize],
    pub block: [::std::os::raw::c_uchar; 64usize],
    pub blkused: ::std::os::raw::c_int,
    pub lenhi: uint32,
    pub lenlo: uint32,
}
#[test]
fn bindgen_test_layout_SHA_State() {
    const UNINIT: ::std::mem::MaybeUninit<SHA_State> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SHA_State>(),
        96usize,
        concat!("Size of: ", stringify!(SHA_State))
    );
    assert_eq!(
        ::std::mem::align_of::<SHA_State>(),
        4usize,
        concat!("Alignment of ", stringify!(SHA_State))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SHA_State),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SHA_State),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blkused) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(SHA_State),
            "::",
            stringify!(blkused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lenhi) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SHA_State),
            "::",
            stringify!(lenhi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lenlo) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(SHA_State),
            "::",
            stringify!(lenlo)
        )
    );
}
extern "C" {
    pub fn SHA_Init(s: *mut SHA_State);
}
extern "C" {
    pub fn SHA_Bytes(
        s: *mut SHA_State,
        p: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SHA_Final(s: *mut SHA_State, output: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn SHA_Simple(
        p: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn document_new(
        pw: ::std::os::raw::c_int,
        ph: ::std::os::raw::c_int,
        userscale: f32,
    ) -> *mut document;
}
extern "C" {
    pub fn document_free(doc: *mut document);
}
extern "C" {
    pub fn document_add_puzzle(
        doc: *mut document,
        game: *const game,
        par: *mut game_params,
        ui: *mut game_ui,
        st: *mut game_state,
        st2: *mut game_state,
    );
}
extern "C" {
    pub fn document_npages(doc: *const document) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn document_begin(doc: *const document, dr: *mut drawing);
}
extern "C" {
    pub fn document_end(doc: *const document, dr: *mut drawing);
}
extern "C" {
    pub fn document_print_page(
        doc: *const document,
        dr: *mut drawing,
        page_nr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn document_print(doc: *const document, dr: *mut drawing);
}
extern "C" {
    pub fn ps_init(outfile: *mut FILE, colour: bool) -> *mut psdata;
}
extern "C" {
    pub fn ps_free(ps: *mut psdata);
}
extern "C" {
    pub fn ps_drawing_api(ps: *mut psdata) -> *mut drawing;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _combi_ctx {
    pub r: ::std::os::raw::c_int,
    pub n: ::std::os::raw::c_int,
    pub nleft: ::std::os::raw::c_int,
    pub total: ::std::os::raw::c_int,
    pub a: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__combi_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<_combi_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_combi_ctx>(),
        24usize,
        concat!("Size of: ", stringify!(_combi_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<_combi_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(_combi_ctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_combi_ctx),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_combi_ctx),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nleft) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_combi_ctx),
            "::",
            stringify!(nleft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_combi_ctx),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_combi_ctx),
            "::",
            stringify!(a)
        )
    );
}
pub type combi_ctx = _combi_ctx;
extern "C" {
    pub fn new_combi(r: ::std::os::raw::c_int, n: ::std::os::raw::c_int) -> *mut combi_ctx;
}
extern "C" {
    pub fn reset_combi(combi: *mut combi_ctx);
}
extern "C" {
    pub fn next_combi(combi: *mut combi_ctx) -> *mut combi_ctx;
}
extern "C" {
    pub fn free_combi(combi: *mut combi_ctx);
}
extern "C" {
    pub fn divvy_rectangle(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        rs: *mut random_state,
    ) -> *mut DSF;
}
extern "C" {
    pub fn divvy_rectangle_attempt(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        rs: *mut random_state,
    ) -> *mut DSF;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct findloopstate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn findloop_new_state(nvertices: ::std::os::raw::c_int) -> *mut findloopstate;
}
extern "C" {
    pub fn findloop_free_state(arg1: *mut findloopstate);
}
pub type neighbour_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        vertex: ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn findloop_run(
        state: *mut findloopstate,
        nvertices: ::std::os::raw::c_int,
        neighbour: neighbour_fn_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn findloop_is_loop_edge(
        state: *mut findloopstate,
        u: ::std::os::raw::c_int,
        v: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn findloop_is_bridge(
        pv: *mut findloopstate,
        u: ::std::os::raw::c_int,
        v: ::std::os::raw::c_int,
        u_vertices: *mut ::std::os::raw::c_int,
        v_vertices: *mut ::std::os::raw::c_int,
    ) -> bool;
}
pub type arraysort_cmpfn_t = ::std::option::Option<
    unsafe extern "C" fn(
        av: *const ::std::os::raw::c_void,
        bv: *const ::std::os::raw::c_void,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn arraysort_fn(
        array: *mut ::std::os::raw::c_void,
        nmemb: usize,
        size: usize,
        cmp: arraysort_cmpfn_t,
        ctx: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct game {
    pub name: *const ::std::os::raw::c_char,
    pub winhelp_topic: *const ::std::os::raw::c_char,
    pub htmlhelp_topic: *const ::std::os::raw::c_char,
    pub default_params: ::std::option::Option<unsafe extern "C" fn() -> *mut game_params>,
    pub fetch_preset: ::std::option::Option<
        unsafe extern "C" fn(
            i: ::std::os::raw::c_int,
            name: *mut *mut ::std::os::raw::c_char,
            params: *mut *mut game_params,
        ) -> bool,
    >,
    pub preset_menu: ::std::option::Option<unsafe extern "C" fn() -> *mut preset_menu>,
    pub decode_params: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut game_params, string: *const ::std::os::raw::c_char),
    >,
    pub encode_params: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const game_params, full: bool) -> *mut ::std::os::raw::c_char,
    >,
    pub free_params: ::std::option::Option<unsafe extern "C" fn(params: *mut game_params)>,
    pub dup_params:
        ::std::option::Option<unsafe extern "C" fn(params: *const game_params) -> *mut game_params>,
    pub can_configure: bool,
    pub configure:
        ::std::option::Option<unsafe extern "C" fn(params: *const game_params) -> *mut config_item>,
    pub custom_params:
        ::std::option::Option<unsafe extern "C" fn(cfg: *const config_item) -> *mut game_params>,
    pub validate_params: ::std::option::Option<
        unsafe extern "C" fn(
            params: *const game_params,
            full: bool,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub new_desc: ::std::option::Option<
        unsafe extern "C" fn(
            params: *const game_params,
            rs: *mut random_state,
            aux: *mut *mut ::std::os::raw::c_char,
            interactive: bool,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub validate_desc: ::std::option::Option<
        unsafe extern "C" fn(
            params: *const game_params,
            desc: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub new_game: ::std::option::Option<
        unsafe extern "C" fn(
            me: *mut midend,
            params: *const game_params,
            desc: *const ::std::os::raw::c_char,
        ) -> *mut game_state,
    >,
    pub dup_game:
        ::std::option::Option<unsafe extern "C" fn(state: *const game_state) -> *mut game_state>,
    pub free_game: ::std::option::Option<unsafe extern "C" fn(state: *mut game_state)>,
    pub can_solve: bool,
    pub solve: ::std::option::Option<
        unsafe extern "C" fn(
            orig: *const game_state,
            curr: *const game_state,
            aux: *const ::std::os::raw::c_char,
            error: *mut *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub can_format_as_text_ever: bool,
    pub can_format_as_text_now:
        ::std::option::Option<unsafe extern "C" fn(params: *const game_params) -> bool>,
    pub text_format: ::std::option::Option<
        unsafe extern "C" fn(state: *const game_state) -> *mut ::std::os::raw::c_char,
    >,
    pub get_prefs:
        ::std::option::Option<unsafe extern "C" fn(ui: *mut game_ui) -> *mut config_item>,
    pub set_prefs:
        ::std::option::Option<unsafe extern "C" fn(ui: *mut game_ui, cfg: *const config_item)>,
    pub new_ui:
        ::std::option::Option<unsafe extern "C" fn(state: *const game_state) -> *mut game_ui>,
    pub free_ui: ::std::option::Option<unsafe extern "C" fn(ui: *mut game_ui)>,
    pub encode_ui: ::std::option::Option<
        unsafe extern "C" fn(ui: *const game_ui) -> *mut ::std::os::raw::c_char,
    >,
    pub decode_ui: ::std::option::Option<
        unsafe extern "C" fn(
            ui: *mut game_ui,
            encoding: *const ::std::os::raw::c_char,
            state: *const game_state,
        ),
    >,
    pub request_keys: ::std::option::Option<
        unsafe extern "C" fn(
            params: *const game_params,
            nkeys: *mut ::std::os::raw::c_int,
        ) -> *mut key_label,
    >,
    pub changed_state: ::std::option::Option<
        unsafe extern "C" fn(
            ui: *mut game_ui,
            oldstate: *const game_state,
            newstate: *const game_state,
        ),
    >,
    pub current_key_label: ::std::option::Option<
        unsafe extern "C" fn(
            ui: *const game_ui,
            state: *const game_state,
            button: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub interpret_move: ::std::option::Option<
        unsafe extern "C" fn(
            state: *const game_state,
            ui: *mut game_ui,
            ds: *const game_drawstate,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            button: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub execute_move: ::std::option::Option<
        unsafe extern "C" fn(
            state: *const game_state,
            move_: *const ::std::os::raw::c_char,
        ) -> *mut game_state,
    >,
    pub preferred_tilesize: ::std::os::raw::c_int,
    pub compute_size: ::std::option::Option<
        unsafe extern "C" fn(
            params: *const game_params,
            tilesize: ::std::os::raw::c_int,
            ui: *const game_ui,
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
        ),
    >,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(
            dr: *mut drawing,
            ds: *mut game_drawstate,
            params: *const game_params,
            tilesize: ::std::os::raw::c_int,
        ),
    >,
    pub colours: ::std::option::Option<
        unsafe extern "C" fn(fe: *mut frontend, ncolours: *mut ::std::os::raw::c_int) -> *mut f32,
    >,
    pub new_drawstate: ::std::option::Option<
        unsafe extern "C" fn(dr: *mut drawing, state: *const game_state) -> *mut game_drawstate,
    >,
    pub free_drawstate:
        ::std::option::Option<unsafe extern "C" fn(dr: *mut drawing, ds: *mut game_drawstate)>,
    pub redraw: ::std::option::Option<
        unsafe extern "C" fn(
            dr: *mut drawing,
            ds: *mut game_drawstate,
            oldstate: *const game_state,
            newstate: *const game_state,
            dir: ::std::os::raw::c_int,
            ui: *const game_ui,
            anim_time: f32,
            flash_time: f32,
        ),
    >,
    pub anim_length: ::std::option::Option<
        unsafe extern "C" fn(
            oldstate: *const game_state,
            newstate: *const game_state,
            dir: ::std::os::raw::c_int,
            ui: *mut game_ui,
        ) -> f32,
    >,
    pub flash_length: ::std::option::Option<
        unsafe extern "C" fn(
            oldstate: *const game_state,
            newstate: *const game_state,
            dir: ::std::os::raw::c_int,
            ui: *mut game_ui,
        ) -> f32,
    >,
    pub get_cursor_location: ::std::option::Option<
        unsafe extern "C" fn(
            ui: *const game_ui,
            ds: *const game_drawstate,
            state: *const game_state,
            params: *const game_params,
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
            w: *mut ::std::os::raw::c_int,
            h: *mut ::std::os::raw::c_int,
        ),
    >,
    pub status: ::std::option::Option<
        unsafe extern "C" fn(state: *const game_state) -> ::std::os::raw::c_int,
    >,
    pub can_print: bool,
    pub can_print_in_colour: bool,
    pub print_size: ::std::option::Option<
        unsafe extern "C" fn(
            params: *const game_params,
            ui: *const game_ui,
            x: *mut f32,
            y: *mut f32,
        ),
    >,
    pub print: ::std::option::Option<
        unsafe extern "C" fn(
            dr: *mut drawing,
            state: *const game_state,
            ui: *const game_ui,
            tilesize: ::std::os::raw::c_int,
        ),
    >,
    pub wants_statusbar: bool,
    pub is_timed: bool,
    pub timing_state: ::std::option::Option<
        unsafe extern "C" fn(state: *const game_state, ui: *mut game_ui) -> bool,
    >,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_game() {
    const UNINIT: ::std::mem::MaybeUninit<game> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<game>(),
        416usize,
        concat!("Size of: ", stringify!(game))
    );
    assert_eq!(
        ::std::mem::align_of::<game>(),
        8usize,
        concat!("Alignment of ", stringify!(game))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).winhelp_topic) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(winhelp_topic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).htmlhelp_topic) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(htmlhelp_topic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_params) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(default_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fetch_preset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(fetch_preset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preset_menu) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(preset_menu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decode_params) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(decode_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encode_params) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(encode_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_params) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(free_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dup_params) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(dup_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_configure) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(can_configure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configure) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(configure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_params) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(custom_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validate_params) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(validate_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_desc) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(new_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validate_desc) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(validate_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_game) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(new_game)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dup_game) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(dup_game)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_game) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(free_game)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_solve) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(can_solve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).solve) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(solve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_format_as_text_ever) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(can_format_as_text_ever)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_format_as_text_now) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(can_format_as_text_now)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_format) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(text_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_prefs) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(get_prefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_prefs) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(set_prefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_ui) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(new_ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_ui) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(free_ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encode_ui) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(encode_ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decode_ui) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(decode_ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_keys) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(request_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed_state) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(changed_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_key_label) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(current_key_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interpret_move) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(interpret_move)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).execute_move) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(execute_move)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preferred_tilesize) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(preferred_tilesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compute_size) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(compute_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_size) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(set_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colours) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(colours)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_drawstate) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(new_drawstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_drawstate) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(free_drawstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redraw) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(redraw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anim_length) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(anim_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_length) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(flash_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_cursor_location) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(get_cursor_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_print) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(can_print)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_print_in_colour) as usize - ptr as usize },
        369usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(can_print_in_colour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_size) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(print_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(print)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wants_statusbar) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(wants_statusbar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_timed) as usize - ptr as usize },
        393usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(is_timed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timing_state) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(timing_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(game),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drawing_api {
    pub draw_text: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            fonttype: ::std::os::raw::c_int,
            fontsize: ::std::os::raw::c_int,
            align: ::std::os::raw::c_int,
            colour: ::std::os::raw::c_int,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub draw_rect: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            colour: ::std::os::raw::c_int,
        ),
    >,
    pub draw_line: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
            colour: ::std::os::raw::c_int,
        ),
    >,
    pub draw_polygon: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            coords: *const ::std::os::raw::c_int,
            npoints: ::std::os::raw::c_int,
            fillcolour: ::std::os::raw::c_int,
            outlinecolour: ::std::os::raw::c_int,
        ),
    >,
    pub draw_circle: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            cx: ::std::os::raw::c_int,
            cy: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            fillcolour: ::std::os::raw::c_int,
            outlinecolour: ::std::os::raw::c_int,
        ),
    >,
    pub draw_update: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
    >,
    pub clip: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
    >,
    pub unclip: ::std::option::Option<unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void)>,
    pub start_draw:
        ::std::option::Option<unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void)>,
    pub end_draw: ::std::option::Option<unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void)>,
    pub status_bar: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub blitter_new: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ) -> *mut blitter,
    >,
    pub blitter_free: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void, bl: *mut blitter),
    >,
    pub blitter_save: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            bl: *mut blitter,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
    >,
    pub blitter_load: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            bl: *mut blitter,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
    >,
    pub begin_doc: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void, pages: ::std::os::raw::c_int),
    >,
    pub begin_page: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void, number: ::std::os::raw::c_int),
    >,
    pub begin_puzzle: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            xm: f32,
            xc: f32,
            ym: f32,
            yc: f32,
            pw: ::std::os::raw::c_int,
            ph: ::std::os::raw::c_int,
            wmm: f32,
        ),
    >,
    pub end_puzzle:
        ::std::option::Option<unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void)>,
    pub end_page: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void, number: ::std::os::raw::c_int),
    >,
    pub end_doc: ::std::option::Option<unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void)>,
    pub line_width: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void, width: f32),
    >,
    pub line_dotted: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void, dotted: bool),
    >,
    pub text_fallback: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            strings: *const *const ::std::os::raw::c_char,
            nstrings: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub draw_thick_line: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            thickness: f32,
            x1: f32,
            y1: f32,
            x2: f32,
            y2: f32,
            colour: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout_drawing_api() {
    const UNINIT: ::std::mem::MaybeUninit<drawing_api> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drawing_api>(),
        200usize,
        concat!("Size of: ", stringify!(drawing_api))
    );
    assert_eq!(
        ::std::mem::align_of::<drawing_api>(),
        8usize,
        concat!("Alignment of ", stringify!(drawing_api))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw_text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(draw_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw_rect) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(draw_rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw_line) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(draw_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw_polygon) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(draw_polygon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw_circle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(draw_circle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw_update) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(draw_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(clip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unclip) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(unclip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_draw) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(start_draw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_draw) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(end_draw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status_bar) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(status_bar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blitter_new) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(blitter_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blitter_free) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(blitter_free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blitter_save) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(blitter_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blitter_load) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(blitter_load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin_doc) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(begin_doc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin_page) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(begin_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin_puzzle) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(begin_puzzle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_puzzle) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(end_puzzle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_page) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(end_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_doc) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(end_doc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_width) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(line_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_dotted) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(line_dotted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_fallback) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(text_fallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw_thick_line) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(drawing_api),
            "::",
            stringify!(draw_thick_line)
        )
    );
}
extern "C" {
    pub static thegame: game;
}
extern "C" {
    pub static mut MOVE_UI_UPDATE: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut MOVE_NO_EFFECT: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut MOVE_UNUSED: [::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
