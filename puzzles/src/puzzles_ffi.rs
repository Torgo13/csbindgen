/* automatically generated by csbindgen */

#[allow(unused)]
use ::std::os::raw::*;

use super::puzzles::*;


#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetwc(
    _Stream: *mut puzzles::FILE
) -> puzzles::wint_t
{
    puzzles::fgetwc(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fputwc(
    _Character: puzzles::wchar_t,
    _Stream: *mut puzzles::FILE
) -> puzzles::wint_t
{
    puzzles::fputwc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getwc(
    _Stream: *mut puzzles::FILE
) -> puzzles::wint_t
{
    puzzles::getwc(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getwchar(

) -> puzzles::wint_t
{
    puzzles::getwchar(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetws(
    _Buffer: *mut puzzles::wchar_t,
    _BufferCount: c_int,
    _Stream: *mut puzzles::FILE
) -> *mut puzzles::wchar_t
{
    puzzles::fgetws(
        _Buffer,
        _BufferCount,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fputws(
    _Buffer: *const puzzles::wchar_t,
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::fputws(
        _Buffer,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putwc(
    _Character: puzzles::wchar_t,
    _Stream: *mut puzzles::FILE
) -> puzzles::wint_t
{
    puzzles::putwc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putwchar(
    _Character: puzzles::wchar_t
) -> puzzles::wint_t
{
    puzzles::putwchar(
        _Character
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ungetwc(
    _Character: puzzles::wint_t,
    _Stream: *mut puzzles::FILE
) -> puzzles::wint_t
{
    puzzles::ungetwc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_clearerr_s(
    _Stream: *mut puzzles::FILE
) -> puzzles::errno_t
{
    puzzles::clearerr_s(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fopen_s(
    _Stream: *mut *mut puzzles::FILE,
    _FileName: *const c_char,
    _Mode: *const c_char
) -> puzzles::errno_t
{
    puzzles::fopen_s(
        _Stream,
        _FileName,
        _Mode
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fread_s(
    _Buffer: *mut c_void,
    _BufferSize: usize,
    _ElementSize: usize,
    _ElementCount: usize,
    _Stream: *mut puzzles::FILE
) -> usize
{
    puzzles::fread_s(
        _Buffer,
        _BufferSize,
        _ElementSize,
        _ElementCount,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_freopen_s(
    _Stream: *mut *mut puzzles::FILE,
    _FileName: *const c_char,
    _Mode: *const c_char,
    _OldStream: *mut puzzles::FILE
) -> puzzles::errno_t
{
    puzzles::freopen_s(
        _Stream,
        _FileName,
        _Mode,
        _OldStream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_gets_s(
    _Buffer: *mut c_char,
    _Size: puzzles::rsize_t
) -> *mut c_char
{
    puzzles::gets_s(
        _Buffer,
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tmpfile_s(
    _Stream: *mut *mut puzzles::FILE
) -> puzzles::errno_t
{
    puzzles::tmpfile_s(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tmpnam_s(
    _Buffer: *mut c_char,
    _Size: puzzles::rsize_t
) -> puzzles::errno_t
{
    puzzles::tmpnam_s(
        _Buffer,
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_clearerr(
    _Stream: *mut puzzles::FILE
)
{
    puzzles::clearerr(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fclose(
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::fclose(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_feof(
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::feof(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ferror(
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::ferror(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fflush(
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::fflush(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetc(
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::fgetc(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetpos(
    _Stream: *mut puzzles::FILE,
    _Position: *mut puzzles::fpos_t
) -> c_int
{
    puzzles::fgetpos(
        _Stream,
        _Position
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgets(
    _Buffer: *mut c_char,
    _MaxCount: c_int,
    _Stream: *mut puzzles::FILE
) -> *mut c_char
{
    puzzles::fgets(
        _Buffer,
        _MaxCount,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fopen(
    _FileName: *const c_char,
    _Mode: *const c_char
) -> *mut puzzles::FILE
{
    puzzles::fopen(
        _FileName,
        _Mode
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fputc(
    _Character: c_int,
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::fputc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fputs(
    _Buffer: *const c_char,
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::fputs(
        _Buffer,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fread(
    _Buffer: *mut c_void,
    _ElementSize: c_ulonglong,
    _ElementCount: c_ulonglong,
    _Stream: *mut puzzles::FILE
) -> c_ulonglong
{
    puzzles::fread(
        _Buffer,
        _ElementSize,
        _ElementCount,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_freopen(
    _FileName: *const c_char,
    _Mode: *const c_char,
    _Stream: *mut puzzles::FILE
) -> *mut puzzles::FILE
{
    puzzles::freopen(
        _FileName,
        _Mode,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fsetpos(
    _Stream: *mut puzzles::FILE,
    _Position: *const puzzles::fpos_t
) -> c_int
{
    puzzles::fsetpos(
        _Stream,
        _Position
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fseek(
    _Stream: *mut puzzles::FILE,
    _Offset: c_long,
    _Origin: c_int
) -> c_int
{
    puzzles::fseek(
        _Stream,
        _Offset,
        _Origin
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ftell(
    _Stream: *mut puzzles::FILE
) -> c_long
{
    puzzles::ftell(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fwrite(
    _Buffer: *const c_void,
    _ElementSize: c_ulonglong,
    _ElementCount: c_ulonglong,
    _Stream: *mut puzzles::FILE
) -> c_ulonglong
{
    puzzles::fwrite(
        _Buffer,
        _ElementSize,
        _ElementCount,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getc(
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::getc(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getchar(

) -> c_int
{
    puzzles::getchar(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_perror(
    _ErrorMessage: *const c_char
)
{
    puzzles::perror(
        _ErrorMessage
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putc(
    _Character: c_int,
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::putc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putchar(
    _Character: c_int
) -> c_int
{
    puzzles::putchar(
        _Character
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_puts(
    _Buffer: *const c_char
) -> c_int
{
    puzzles::puts(
        _Buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_remove(
    _FileName: *const c_char
) -> c_int
{
    puzzles::remove(
        _FileName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rename(
    _OldFileName: *const c_char,
    _NewFileName: *const c_char
) -> c_int
{
    puzzles::rename(
        _OldFileName,
        _NewFileName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_unlink(
    _FileName: *const c_char
) -> c_int
{
    puzzles::unlink(
        _FileName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rewind(
    _Stream: *mut puzzles::FILE
)
{
    puzzles::rewind(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_setbuf(
    _Stream: *mut puzzles::FILE,
    _Buffer: *mut c_char
)
{
    puzzles::setbuf(
        _Stream,
        _Buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_setvbuf(
    _Stream: *mut puzzles::FILE,
    _Buffer: *mut c_char,
    _Mode: c_int,
    _Size: usize
) -> c_int
{
    puzzles::setvbuf(
        _Stream,
        _Buffer,
        _Mode,
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tmpfile(

) -> *mut puzzles::FILE
{
    puzzles::tmpfile(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tmpnam(
    _Buffer: *mut c_char
) -> *mut c_char
{
    puzzles::tmpnam(
        _Buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ungetc(
    _Character: c_int,
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::ungetc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tempnam(
    _Directory: *const c_char,
    _FilePrefix: *const c_char
) -> *mut c_char
{
    puzzles::tempnam(
        _Directory,
        _FilePrefix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fcloseall(

) -> c_int
{
    puzzles::fcloseall(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fdopen(
    _FileHandle: c_int,
    _Format: *const c_char
) -> *mut puzzles::FILE
{
    puzzles::fdopen(
        _FileHandle,
        _Format
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetchar(

) -> c_int
{
    puzzles::fgetchar(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fileno(
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::fileno(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_flushall(

) -> c_int
{
    puzzles::flushall(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fputchar(
    _Ch: c_int
) -> c_int
{
    puzzles::fputchar(
        _Ch
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getw(
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::getw(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putw(
    _Ch: c_int,
    _Stream: *mut puzzles::FILE
) -> c_int
{
    puzzles::putw(
        _Ch,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rmtmp(

) -> c_int
{
    puzzles::rmtmp(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_calloc(
    _Count: c_ulonglong,
    _Size: c_ulonglong
) -> *mut c_void
{
    puzzles::calloc(
        _Count,
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_free(
    _Block: *mut c_void
)
{
    puzzles::free(
        _Block
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_malloc(
    _Size: c_ulonglong
) -> *mut c_void
{
    puzzles::malloc(
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_realloc(
    _Block: *mut c_void,
    _Size: c_ulonglong
) -> *mut c_void
{
    puzzles::realloc(
        _Block,
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_bsearch_s(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements: puzzles::rsize_t,
    _SizeOfElements: puzzles::rsize_t,
    _CompareFunction: puzzles::_CoreCrtSecureSearchSortCompareFunction,
    _Context: *mut c_void
) -> *mut c_void
{
    puzzles::bsearch_s(
        _Key,
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction,
        _Context
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qsort_s(
    _Base: *mut c_void,
    _NumOfElements: puzzles::rsize_t,
    _SizeOfElements: puzzles::rsize_t,
    _CompareFunction: puzzles::_CoreCrtSecureSearchSortCompareFunction,
    _Context: *mut c_void
)
{
    puzzles::qsort_s(
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction,
        _Context
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_bsearch(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements: usize,
    _SizeOfElements: usize,
    _CompareFunction: puzzles::_CoreCrtNonSecureSearchSortCompareFunction
) -> *mut c_void
{
    puzzles::bsearch(
        _Key,
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qsort(
    _Base: *mut c_void,
    _NumOfElements: usize,
    _SizeOfElements: usize,
    _CompareFunction: puzzles::_CoreCrtNonSecureSearchSortCompareFunction
)
{
    puzzles::qsort(
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lfind(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements: *mut c_uint,
    _SizeOfElements: c_uint,
    _CompareFunction: puzzles::_CoreCrtNonSecureSearchSortCompareFunction
) -> *mut c_void
{
    puzzles::lfind(
        _Key,
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lsearch(
    _Key: *const c_void,
    _Base: *mut c_void,
    _NumOfElements: *mut c_uint,
    _SizeOfElements: c_uint,
    _CompareFunction: puzzles::_CoreCrtNonSecureSearchSortCompareFunction
) -> *mut c_void
{
    puzzles::lsearch(
        _Key,
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstod(
    _String: *const puzzles::wchar_t,
    _EndPtr: *mut *mut puzzles::wchar_t
) -> puzzles::f64
{
    puzzles::wcstod(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstol(
    _String: *const puzzles::wchar_t,
    _EndPtr: *mut *mut puzzles::wchar_t,
    _Radix: c_int
) -> c_long
{
    puzzles::wcstol(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstoll(
    _String: *const puzzles::wchar_t,
    _EndPtr: *mut *mut puzzles::wchar_t,
    _Radix: c_int
) -> c_longlong
{
    puzzles::wcstoll(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstoul(
    _String: *const puzzles::wchar_t,
    _EndPtr: *mut *mut puzzles::wchar_t,
    _Radix: c_int
) -> c_ulong
{
    puzzles::wcstoul(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstoull(
    _String: *const puzzles::wchar_t,
    _EndPtr: *mut *mut puzzles::wchar_t,
    _Radix: c_int
) -> c_ulonglong
{
    puzzles::wcstoull(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstold(
    _String: *const puzzles::wchar_t,
    _EndPtr: *mut *mut puzzles::wchar_t
) -> puzzles::f64
{
    puzzles::wcstold(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstof(
    _String: *const puzzles::wchar_t,
    _EndPtr: *mut *mut puzzles::wchar_t
) -> puzzles::f32
{
    puzzles::wcstof(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atexit(
    arg1: Option<puzzles::unsafe extern "C" fn()>
) -> c_int
{
    puzzles::atexit(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_at_quick_exit(
    arg1: Option<puzzles::unsafe extern "C" fn()>
) -> c_int
{
    puzzles::at_quick_exit(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_abs(
    _Number: c_int
) -> c_int
{
    puzzles::abs(
        _Number
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_labs(
    _Number: c_long
) -> c_long
{
    puzzles::labs(
        _Number
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_llabs(
    _Number: c_longlong
) -> c_longlong
{
    puzzles::llabs(
        _Number
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_div(
    _Numerator: c_int,
    _Denominator: c_int
) -> puzzles::div_t
{
    puzzles::div(
        _Numerator,
        _Denominator
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ldiv(
    _Numerator: c_long,
    _Denominator: c_long
) -> puzzles::ldiv_t
{
    puzzles::ldiv(
        _Numerator,
        _Denominator
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lldiv(
    _Numerator: c_longlong,
    _Denominator: c_longlong
) -> puzzles::lldiv_t
{
    puzzles::lldiv(
        _Numerator,
        _Denominator
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srand(
    _Seed: c_uint
)
{
    puzzles::srand(
        _Seed
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rand(

) -> c_int
{
    puzzles::rand(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atof(
    _String: *const c_char
) -> puzzles::f64
{
    puzzles::atof(
        _String
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atoi(
    _String: *const c_char
) -> c_int
{
    puzzles::atoi(
        _String
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atol(
    _String: *const c_char
) -> c_long
{
    puzzles::atol(
        _String
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atoll(
    _String: *const c_char
) -> c_longlong
{
    puzzles::atoll(
        _String
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char
) -> puzzles::f32
{
    puzzles::strtof(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtod(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char
) -> puzzles::f64
{
    puzzles::strtod(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtold(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char
) -> puzzles::f64
{
    puzzles::strtold(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtol(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix: c_int
) -> c_long
{
    puzzles::strtol(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoll(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix: c_int
) -> c_longlong
{
    puzzles::strtoll(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoul(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix: c_int
) -> c_ulong
{
    puzzles::strtoul(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoull(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix: c_int
) -> c_ulonglong
{
    puzzles::strtoull(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mblen(
    _Ch: *const c_char,
    _MaxCount: usize
) -> c_int
{
    puzzles::mblen(
        _Ch,
        _MaxCount
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mbtowc(
    _DstCh: *mut puzzles::wchar_t,
    _SrcCh: *const c_char,
    _SrcSizeInBytes: usize
) -> c_int
{
    puzzles::mbtowc(
        _DstCh,
        _SrcCh,
        _SrcSizeInBytes
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mbstowcs_s(
    _PtNumOfCharConverted: *mut usize,
    _DstBuf: *mut puzzles::wchar_t,
    _SizeInWords: usize,
    _SrcBuf: *const c_char,
    _MaxCount: usize
) -> puzzles::errno_t
{
    puzzles::mbstowcs_s(
        _PtNumOfCharConverted,
        _DstBuf,
        _SizeInWords,
        _SrcBuf,
        _MaxCount
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mbstowcs(
    _Dest: *mut puzzles::wchar_t,
    _Source: *const c_char,
    _MaxCount: usize
) -> usize
{
    puzzles::mbstowcs(
        _Dest,
        _Source,
        _MaxCount
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wctomb(
    _MbCh: *mut c_char,
    _WCh: puzzles::wchar_t
) -> c_int
{
    puzzles::wctomb(
        _MbCh,
        _WCh
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wctomb_s(
    _SizeConverted: *mut c_int,
    _MbCh: *mut c_char,
    _SizeInBytes: puzzles::rsize_t,
    _WCh: puzzles::wchar_t
) -> puzzles::errno_t
{
    puzzles::wctomb_s(
        _SizeConverted,
        _MbCh,
        _SizeInBytes,
        _WCh
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstombs_s(
    _PtNumOfCharConverted: *mut usize,
    _Dst: *mut c_char,
    _DstSizeInBytes: usize,
    _Src: *const puzzles::wchar_t,
    _MaxCountInBytes: usize
) -> puzzles::errno_t
{
    puzzles::wcstombs_s(
        _PtNumOfCharConverted,
        _Dst,
        _DstSizeInBytes,
        _Src,
        _MaxCountInBytes
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstombs(
    _Dest: *mut c_char,
    _Source: *const puzzles::wchar_t,
    _MaxCount: usize
) -> usize
{
    puzzles::wcstombs(
        _Dest,
        _Source,
        _MaxCount
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getenv_s(
    _RequiredCount: *mut usize,
    _Buffer: *mut c_char,
    _BufferCount: puzzles::rsize_t,
    _VarName: *const c_char
) -> puzzles::errno_t
{
    puzzles::getenv_s(
        _RequiredCount,
        _Buffer,
        _BufferCount,
        _VarName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getenv(
    _VarName: *const c_char
) -> *mut c_char
{
    puzzles::getenv(
        _VarName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_system(
    _Command: *const c_char
) -> c_int
{
    puzzles::system(
        _Command
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ecvt(
    _Value: puzzles::f64,
    _DigitCount: c_int,
    _PtDec: *mut c_int,
    _PtSign: *mut c_int
) -> *mut c_char
{
    puzzles::ecvt(
        _Value,
        _DigitCount,
        _PtDec,
        _PtSign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fcvt(
    _Value: puzzles::f64,
    _FractionalDigitCount: c_int,
    _PtDec: *mut c_int,
    _PtSign: *mut c_int
) -> *mut c_char
{
    puzzles::fcvt(
        _Value,
        _FractionalDigitCount,
        _PtDec,
        _PtSign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_gcvt(
    _Value: puzzles::f64,
    _DigitCount: c_int,
    _DstBuf: *mut c_char
) -> *mut c_char
{
    puzzles::gcvt(
        _Value,
        _DigitCount,
        _DstBuf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_itoa(
    _Value: c_int,
    _Buffer: *mut c_char,
    _Radix: c_int
) -> *mut c_char
{
    puzzles::itoa(
        _Value,
        _Buffer,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ltoa(
    _Value: c_long,
    _Buffer: *mut c_char,
    _Radix: c_int
) -> *mut c_char
{
    puzzles::ltoa(
        _Value,
        _Buffer,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_swab(
    _Buf1: *mut c_char,
    _Buf2: *mut c_char,
    _SizeInBytes: c_int
)
{
    puzzles::swab(
        _Buf1,
        _Buf2,
        _SizeInBytes
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ultoa(
    _Value: c_ulong,
    _Buffer: *mut c_char,
    _Radix: c_int
) -> *mut c_char
{
    puzzles::ultoa(
        _Value,
        _Buffer,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putenv(
    _EnvString: *const c_char
) -> c_int
{
    puzzles::putenv(
        _EnvString
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_onexit(
    _Func: puzzles::_onexit_t
) -> puzzles::_onexit_t
{
    puzzles::onexit(
        _Func
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_preset_menu_new(

) -> *mut puzzles::preset_menu
{
    puzzles::preset_menu_new(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_preset_menu_add_submenu(
    parent: *mut puzzles::preset_menu,
    title: *mut c_char
) -> *mut puzzles::preset_menu
{
    puzzles::preset_menu_add_submenu(
        parent,
        title
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_preset_menu_add_preset(
    menu: *mut puzzles::preset_menu,
    title: *mut c_char,
    params: *mut puzzles::game_params
)
{
    puzzles::preset_menu_add_preset(
        menu,
        title,
        params
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_preset_menu_lookup_by_id(
    menu: *mut puzzles::preset_menu,
    id: c_int
) -> *mut puzzles::game_params
{
    puzzles::preset_menu_lookup_by_id(
        menu,
        id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fatal(
    fmt: *const c_char
)
{
    puzzles::fatal(
        fmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_frontend_default_colour(
    fe: *mut puzzles::frontend,
    output: *mut puzzles::f32
)
{
    puzzles::frontend_default_colour(
        fe,
        output
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_deactivate_timer(
    fe: *mut puzzles::frontend
)
{
    puzzles::deactivate_timer(
        fe
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_activate_timer(
    fe: *mut puzzles::frontend
)
{
    puzzles::activate_timer(
        fe
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_get_random_seed(
    randseed: *mut *mut c_void,
    randseedsize: *mut c_int
)
{
    puzzles::get_random_seed(
        randseed,
        randseedsize
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_drawing_new(
    api: *const puzzles::drawing_api,
    me: *mut puzzles::midend,
    handle: *mut c_void
) -> *mut puzzles::drawing
{
    puzzles::drawing_new(
        api,
        me,
        handle
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_drawing_free(
    dr: *mut puzzles::drawing
)
{
    puzzles::drawing_free(
        dr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_draw_text(
    dr: *mut puzzles::drawing,
    x: c_int,
    y: c_int,
    fonttype: c_int,
    fontsize: c_int,
    align: c_int,
    colour: c_int,
    text: *const c_char
)
{
    puzzles::draw_text(
        dr,
        x,
        y,
        fonttype,
        fontsize,
        align,
        colour,
        text
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_draw_rect(
    dr: *mut puzzles::drawing,
    x: c_int,
    y: c_int,
    w: c_int,
    h: c_int,
    colour: c_int
)
{
    puzzles::draw_rect(
        dr,
        x,
        y,
        w,
        h,
        colour
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_draw_line(
    dr: *mut puzzles::drawing,
    x1: c_int,
    y1: c_int,
    x2: c_int,
    y2: c_int,
    colour: c_int
)
{
    puzzles::draw_line(
        dr,
        x1,
        y1,
        x2,
        y2,
        colour
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_draw_polygon(
    dr: *mut puzzles::drawing,
    coords: *const c_int,
    npoints: c_int,
    fillcolour: c_int,
    outlinecolour: c_int
)
{
    puzzles::draw_polygon(
        dr,
        coords,
        npoints,
        fillcolour,
        outlinecolour
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_draw_circle(
    dr: *mut puzzles::drawing,
    cx: c_int,
    cy: c_int,
    radius: c_int,
    fillcolour: c_int,
    outlinecolour: c_int
)
{
    puzzles::draw_circle(
        dr,
        cx,
        cy,
        radius,
        fillcolour,
        outlinecolour
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_draw_thick_line(
    dr: *mut puzzles::drawing,
    thickness: puzzles::f32,
    x1: puzzles::f32,
    y1: puzzles::f32,
    x2: puzzles::f32,
    y2: puzzles::f32,
    colour: c_int
)
{
    puzzles::draw_thick_line(
        dr,
        thickness,
        x1,
        y1,
        x2,
        y2,
        colour
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_clip(
    dr: *mut puzzles::drawing,
    x: c_int,
    y: c_int,
    w: c_int,
    h: c_int
)
{
    puzzles::clip(
        dr,
        x,
        y,
        w,
        h
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_unclip(
    dr: *mut puzzles::drawing
)
{
    puzzles::unclip(
        dr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_start_draw(
    dr: *mut puzzles::drawing
)
{
    puzzles::start_draw(
        dr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_draw_update(
    dr: *mut puzzles::drawing,
    x: c_int,
    y: c_int,
    w: c_int,
    h: c_int
)
{
    puzzles::draw_update(
        dr,
        x,
        y,
        w,
        h
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_end_draw(
    dr: *mut puzzles::drawing
)
{
    puzzles::end_draw(
        dr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_text_fallback(
    dr: *mut puzzles::drawing,
    strings: *const *const c_char,
    nstrings: c_int
) -> *mut c_char
{
    puzzles::text_fallback(
        dr,
        strings,
        nstrings
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_status_bar(
    dr: *mut puzzles::drawing,
    text: *const c_char
)
{
    puzzles::status_bar(
        dr,
        text
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_blitter_new(
    dr: *mut puzzles::drawing,
    w: c_int,
    h: c_int
) -> *mut puzzles::blitter
{
    puzzles::blitter_new(
        dr,
        w,
        h
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_blitter_free(
    dr: *mut puzzles::drawing,
    bl: *mut puzzles::blitter
)
{
    puzzles::blitter_free(
        dr,
        bl
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_blitter_save(
    dr: *mut puzzles::drawing,
    bl: *mut puzzles::blitter,
    x: c_int,
    y: c_int
)
{
    puzzles::blitter_save(
        dr,
        bl,
        x,
        y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_blitter_load(
    dr: *mut puzzles::drawing,
    bl: *mut puzzles::blitter,
    x: c_int,
    y: c_int
)
{
    puzzles::blitter_load(
        dr,
        bl,
        x,
        y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_begin_doc(
    dr: *mut puzzles::drawing,
    pages: c_int
)
{
    puzzles::print_begin_doc(
        dr,
        pages
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_begin_page(
    dr: *mut puzzles::drawing,
    number: c_int
)
{
    puzzles::print_begin_page(
        dr,
        number
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_begin_puzzle(
    dr: *mut puzzles::drawing,
    xm: puzzles::f32,
    xc: puzzles::f32,
    ym: puzzles::f32,
    yc: puzzles::f32,
    pw: c_int,
    ph: c_int,
    wmm: puzzles::f32,
    scale: puzzles::f32
)
{
    puzzles::print_begin_puzzle(
        dr,
        xm,
        xc,
        ym,
        yc,
        pw,
        ph,
        wmm,
        scale
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_end_puzzle(
    dr: *mut puzzles::drawing
)
{
    puzzles::print_end_puzzle(
        dr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_end_page(
    dr: *mut puzzles::drawing,
    number: c_int
)
{
    puzzles::print_end_page(
        dr,
        number
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_end_doc(
    dr: *mut puzzles::drawing
)
{
    puzzles::print_end_doc(
        dr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_get_colour(
    dr: *mut puzzles::drawing,
    colour: c_int,
    printing_in_colour: puzzles::bool,
    hatch: *mut c_int,
    r: *mut puzzles::f32,
    g: *mut puzzles::f32,
    b: *mut puzzles::f32
)
{
    puzzles::print_get_colour(
        dr,
        colour,
        printing_in_colour,
        hatch,
        r,
        g,
        b
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_mono_colour(
    dr: *mut puzzles::drawing,
    grey: c_int
) -> c_int
{
    puzzles::print_mono_colour(
        dr,
        grey
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_grey_colour(
    dr: *mut puzzles::drawing,
    grey: puzzles::f32
) -> c_int
{
    puzzles::print_grey_colour(
        dr,
        grey
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_hatched_colour(
    dr: *mut puzzles::drawing,
    hatch: c_int
) -> c_int
{
    puzzles::print_hatched_colour(
        dr,
        hatch
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_rgb_mono_colour(
    dr: *mut puzzles::drawing,
    r: puzzles::f32,
    g: puzzles::f32,
    b: puzzles::f32,
    mono: c_int
) -> c_int
{
    puzzles::print_rgb_mono_colour(
        dr,
        r,
        g,
        b,
        mono
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_rgb_grey_colour(
    dr: *mut puzzles::drawing,
    r: puzzles::f32,
    g: puzzles::f32,
    b: puzzles::f32,
    grey: puzzles::f32
) -> c_int
{
    puzzles::print_rgb_grey_colour(
        dr,
        r,
        g,
        b,
        grey
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_rgb_hatched_colour(
    dr: *mut puzzles::drawing,
    r: puzzles::f32,
    g: puzzles::f32,
    b: puzzles::f32,
    hatch: c_int
) -> c_int
{
    puzzles::print_rgb_hatched_colour(
        dr,
        r,
        g,
        b,
        hatch
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_line_width(
    dr: *mut puzzles::drawing,
    width: c_int
)
{
    puzzles::print_line_width(
        dr,
        width
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_print_line_dotted(
    dr: *mut puzzles::drawing,
    dotted: puzzles::bool
)
{
    puzzles::print_line_dotted(
        dr,
        dotted
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_new(
    fe: *mut puzzles::frontend,
    ourgame: *const puzzles::game,
    drapi: *const puzzles::drawing_api,
    drhandle: *mut c_void
) -> *mut puzzles::midend
{
    puzzles::midend_new(
        fe,
        ourgame,
        drapi,
        drhandle
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_free(
    me: *mut puzzles::midend
)
{
    puzzles::midend_free(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_which_game(
    me: *mut puzzles::midend
) -> *const puzzles::game
{
    puzzles::midend_which_game(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_set_params(
    me: *mut puzzles::midend,
    params: *mut puzzles::game_params
)
{
    puzzles::midend_set_params(
        me,
        params
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_get_params(
    me: *mut puzzles::midend
) -> *mut puzzles::game_params
{
    puzzles::midend_get_params(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_size(
    me: *mut puzzles::midend,
    x: *mut c_int,
    y: *mut c_int,
    user_size: puzzles::bool,
    device_pixel_ratio: puzzles::f64
)
{
    puzzles::midend_size(
        me,
        x,
        y,
        user_size,
        device_pixel_ratio
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_reset_tilesize(
    me: *mut puzzles::midend
)
{
    puzzles::midend_reset_tilesize(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_new_game(
    me: *mut puzzles::midend
)
{
    puzzles::midend_new_game(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_restart_game(
    me: *mut puzzles::midend
)
{
    puzzles::midend_restart_game(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_stop_anim(
    me: *mut puzzles::midend
)
{
    puzzles::midend_stop_anim(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_process_key(
    me: *mut puzzles::midend,
    x: c_int,
    y: c_int,
    button: c_int
) -> c_int
{
    puzzles::midend_process_key(
        me,
        x,
        y,
        button
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_request_keys(
    me: *mut puzzles::midend,
    nkeys: *mut c_int
) -> *mut puzzles::key_label
{
    puzzles::midend_request_keys(
        me,
        nkeys
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_current_key_label(
    me: *mut puzzles::midend,
    button: c_int
) -> *const c_char
{
    puzzles::midend_current_key_label(
        me,
        button
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_force_redraw(
    me: *mut puzzles::midend
)
{
    puzzles::midend_force_redraw(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_redraw(
    me: *mut puzzles::midend
)
{
    puzzles::midend_redraw(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_colours(
    me: *mut puzzles::midend,
    ncolours: *mut c_int
) -> *mut puzzles::f32
{
    puzzles::midend_colours(
        me,
        ncolours
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_freeze_timer(
    me: *mut puzzles::midend,
    tprop: puzzles::f32
)
{
    puzzles::midend_freeze_timer(
        me,
        tprop
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_timer(
    me: *mut puzzles::midend,
    tplus: puzzles::f32
)
{
    puzzles::midend_timer(
        me,
        tplus
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_get_presets(
    me: *mut puzzles::midend,
    id_limit: *mut c_int
) -> *mut puzzles::preset_menu
{
    puzzles::midend_get_presets(
        me,
        id_limit
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_which_preset(
    me: *mut puzzles::midend
) -> c_int
{
    puzzles::midend_which_preset(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_wants_statusbar(
    me: *mut puzzles::midend
) -> puzzles::bool
{
    puzzles::midend_wants_statusbar(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_get_config(
    me: *mut puzzles::midend,
    which: c_int,
    wintitle: *mut *mut c_char
) -> *mut puzzles::config_item
{
    puzzles::midend_get_config(
        me,
        which,
        wintitle
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_set_config(
    me: *mut puzzles::midend,
    which: c_int,
    cfg: *mut puzzles::config_item
) -> *const c_char
{
    puzzles::midend_set_config(
        me,
        which,
        cfg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_game_id(
    me: *mut puzzles::midend,
    id: *const c_char
) -> *const c_char
{
    puzzles::midend_game_id(
        me,
        id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_get_game_id(
    me: *mut puzzles::midend
) -> *mut c_char
{
    puzzles::midend_get_game_id(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_get_random_seed(
    me: *mut puzzles::midend
) -> *mut c_char
{
    puzzles::midend_get_random_seed(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_can_format_as_text_now(
    me: *mut puzzles::midend
) -> puzzles::bool
{
    puzzles::midend_can_format_as_text_now(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_text_format(
    me: *mut puzzles::midend
) -> *mut c_char
{
    puzzles::midend_text_format(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_solve(
    me: *mut puzzles::midend
) -> *const c_char
{
    puzzles::midend_solve(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_status(
    me: *mut puzzles::midend
) -> c_int
{
    puzzles::midend_status(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_can_undo(
    me: *mut puzzles::midend
) -> puzzles::bool
{
    puzzles::midend_can_undo(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_can_redo(
    me: *mut puzzles::midend
) -> puzzles::bool
{
    puzzles::midend_can_redo(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_supersede_game_desc(
    me: *mut puzzles::midend,
    desc: *const c_char,
    privdesc: *const c_char
)
{
    puzzles::midend_supersede_game_desc(
        me,
        desc,
        privdesc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_rewrite_statusbar(
    me: *mut puzzles::midend,
    text: *const c_char
) -> *mut c_char
{
    puzzles::midend_rewrite_statusbar(
        me,
        text
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_serialise(
    me: *mut puzzles::midend,
    write: Option<puzzles::unsafe extern "C" fn(ctx: *mut c_void, buf: *const c_void, len: c_int)>,
    wctx: *mut c_void
)
{
    puzzles::midend_serialise(
        me,
        write,
        wctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_deserialise(
    me: *mut puzzles::midend,
    read: Option<puzzles::unsafe extern "C" fn(ctx: *mut c_void, buf: *mut c_void, len: c_int) -> puzzles::bool>,
    rctx: *mut c_void
) -> *const c_char
{
    puzzles::midend_deserialise(
        me,
        read,
        rctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_load_prefs(
    me: *mut puzzles::midend,
    read: Option<puzzles::unsafe extern "C" fn(ctx: *mut c_void, buf: *mut c_void, len: c_int) -> puzzles::bool>,
    rctx: *mut c_void
) -> *const c_char
{
    puzzles::midend_load_prefs(
        me,
        read,
        rctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_save_prefs(
    me: *mut puzzles::midend,
    write: Option<puzzles::unsafe extern "C" fn(ctx: *mut c_void, buf: *const c_void, len: c_int)>,
    wctx: *mut c_void
)
{
    puzzles::midend_save_prefs(
        me,
        write,
        wctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_identify_game(
    name: *mut *mut c_char,
    read: Option<puzzles::unsafe extern "C" fn(ctx: *mut c_void, buf: *mut c_void, len: c_int) -> puzzles::bool>,
    rctx: *mut c_void
) -> *const c_char
{
    puzzles::identify_game(
        name,
        read,
        rctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_request_id_changes(
    me: *mut puzzles::midend,
    notify: Option<puzzles::unsafe extern "C" fn(arg1: *mut c_void)>,
    ctx: *mut c_void
)
{
    puzzles::midend_request_id_changes(
        me,
        notify,
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_get_cursor_location(
    me: *mut puzzles::midend,
    x: *mut c_int,
    y: *mut c_int,
    w: *mut c_int,
    h: *mut c_int
) -> puzzles::bool
{
    puzzles::midend_get_cursor_location(
        me,
        x,
        y,
        w,
        h
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_print_puzzle(
    me: *mut puzzles::midend,
    doc: *mut puzzles::document,
    with_soln: puzzles::bool
) -> *const c_char
{
    puzzles::midend_print_puzzle(
        me,
        doc,
        with_soln
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_midend_tilesize(
    me: *mut puzzles::midend
) -> c_int
{
    puzzles::midend_tilesize(
        me
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_smalloc(
    size: usize
) -> *mut c_void
{
    puzzles::smalloc(
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srealloc(
    p: *mut c_void,
    size: usize
) -> *mut c_void
{
    puzzles::srealloc(
        p,
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sfree(
    p: *mut c_void
)
{
    puzzles::sfree(
        p
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dupstr(
    s: *const c_char
) -> *mut c_char
{
    puzzles::dupstr(
        s
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_free_cfg(
    cfg: *mut puzzles::config_item
)
{
    puzzles::free_cfg(
        cfg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_free_keys(
    keys: *mut puzzles::key_label,
    nkeys: c_int
)
{
    puzzles::free_keys(
        keys,
        nkeys
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_obfuscate_bitmap(
    bmp: *mut c_uchar,
    bits: c_int,
    decode: puzzles::bool
)
{
    puzzles::obfuscate_bitmap(
        bmp,
        bits,
        decode
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetline(
    fp: *mut puzzles::FILE
) -> *mut c_char
{
    puzzles::fgetline(
        fp
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_make_prefs_path(
    dir: *const c_char,
    sep: *const c_char,
    game: *const puzzles::game,
    suffix: *const c_char
) -> *mut c_char
{
    puzzles::make_prefs_path(
        dir,
        sep,
        game,
        suffix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_n_times_root_k(
    n: c_int,
    k: c_int
) -> c_int
{
    puzzles::n_times_root_k(
        n,
        k
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_bin2hex(
    in_: *const c_uchar,
    inlen: c_int
) -> *mut c_char
{
    puzzles::bin2hex(
        in_,
        inlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hex2bin(
    in_: *const c_char,
    outlen: c_int
) -> *mut c_uchar
{
    puzzles::hex2bin(
        in_,
        outlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getenv_bool(
    name: *const c_char,
    dflt: c_int
) -> c_int
{
    puzzles::getenv_bool(
        name,
        dflt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_colour_mix(
    src1: *const puzzles::f32,
    src2: *const puzzles::f32,
    p: puzzles::f32,
    dst: *mut puzzles::f32
)
{
    puzzles::colour_mix(
        src1,
        src2,
        p,
        dst
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_game_mkhighlight(
    fe: *mut puzzles::frontend,
    ret: *mut puzzles::f32,
    background: c_int,
    highlight: c_int,
    lowlight: c_int
)
{
    puzzles::game_mkhighlight(
        fe,
        ret,
        background,
        highlight,
        lowlight
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_game_mkhighlight_specific(
    fe: *mut puzzles::frontend,
    ret: *mut puzzles::f32,
    background: c_int,
    highlight: c_int,
    lowlight: c_int
)
{
    puzzles::game_mkhighlight_specific(
        fe,
        ret,
        background,
        highlight,
        lowlight
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_shuffle(
    array: *mut c_void,
    nelts: c_int,
    eltsize: c_int,
    rs: *mut puzzles::random_state
)
{
    puzzles::shuffle(
        array,
        nelts,
        eltsize,
        rs
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_draw_rect_outline(
    dr: *mut puzzles::drawing,
    x: c_int,
    y: c_int,
    w: c_int,
    h: c_int,
    colour: c_int
)
{
    puzzles::draw_rect_outline(
        dr,
        x,
        y,
        w,
        h,
        colour
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_draw_rect_corners(
    dr: *mut puzzles::drawing,
    cx: c_int,
    cy: c_int,
    r: c_int,
    col: c_int
)
{
    puzzles::draw_rect_corners(
        dr,
        cx,
        cy,
        r,
        col
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_move_cursor(
    button: c_int,
    x: *mut c_int,
    y: *mut c_int,
    maxw: c_int,
    maxh: c_int,
    wrap: puzzles::bool,
    visible: *mut puzzles::bool
) -> *mut c_char
{
    puzzles::move_cursor(
        button,
        x,
        y,
        maxw,
        maxh,
        wrap,
        visible
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_c2pos(
    w: c_int,
    h: c_int,
    cx: c_int,
    cy: c_int
) -> c_int
{
    puzzles::c2pos(
        w,
        h,
        cx,
        cy
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_c2diff(
    w: c_int,
    h: c_int,
    cx: c_int,
    cy: c_int,
    button: c_int
) -> c_int
{
    puzzles::c2diff(
        w,
        h,
        cx,
        cy,
        button
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_pos2c(
    w: c_int,
    h: c_int,
    pos: c_int,
    cx: *mut c_int,
    cy: *mut c_int
)
{
    puzzles::pos2c(
        w,
        h,
        pos,
        cx,
        cy
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_draw_text_outline(
    dr: *mut puzzles::drawing,
    x: c_int,
    y: c_int,
    fonttype: c_int,
    fontsize: c_int,
    align: c_int,
    text_colour: c_int,
    outline_colour: c_int,
    text: *const c_char
)
{
    puzzles::draw_text_outline(
        dr,
        x,
        y,
        fonttype,
        fontsize,
        align,
        text_colour,
        outline_colour,
        text
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_copy_left_justified(
    buf: *mut c_char,
    sz: usize,
    str_: *const c_char
)
{
    puzzles::copy_left_justified(
        buf,
        sz,
        str_
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_button2label(
    button: c_int
) -> *mut c_char
{
    puzzles::button2label(
        button
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_new(
    size: c_int
) -> *mut puzzles::DSF
{
    puzzles::dsf_new(
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_free(
    dsf: *mut puzzles::DSF
)
{
    puzzles::dsf_free(
        dsf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_copy(
    to: *mut puzzles::DSF,
    from: *mut puzzles::DSF
)
{
    puzzles::dsf_copy(
        to,
        from
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_canonify(
    dsf: *mut puzzles::DSF,
    n: c_int
) -> c_int
{
    puzzles::dsf_canonify(
        dsf,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_equivalent(
    dsf: *mut puzzles::DSF,
    n1: c_int,
    n2: c_int
) -> puzzles::bool
{
    puzzles::dsf_equivalent(
        dsf,
        n1,
        n2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_size(
    dsf: *mut puzzles::DSF,
    n: c_int
) -> c_int
{
    puzzles::dsf_size(
        dsf,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_merge(
    dsf: *mut puzzles::DSF,
    n1: c_int,
    n2: c_int
)
{
    puzzles::dsf_merge(
        dsf,
        n1,
        n2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_new_min(
    size: c_int
) -> *mut puzzles::DSF
{
    puzzles::dsf_new_min(
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_minimal(
    dsf: *mut puzzles::DSF,
    n: c_int
) -> c_int
{
    puzzles::dsf_minimal(
        dsf,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_new_flip(
    size: c_int
) -> *mut puzzles::DSF
{
    puzzles::dsf_new_flip(
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_merge_flip(
    dsf: *mut puzzles::DSF,
    n1: c_int,
    n2: c_int,
    flip: puzzles::bool
)
{
    puzzles::dsf_merge_flip(
        dsf,
        n1,
        n2,
        flip
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_canonify_flip(
    dsf: *mut puzzles::DSF,
    n: c_int,
    flip: *mut puzzles::bool
) -> c_int
{
    puzzles::dsf_canonify_flip(
        dsf,
        n,
        flip
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_dsf_reinit(
    dsf: *mut puzzles::DSF
)
{
    puzzles::dsf_reinit(
        dsf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tdq_new(
    n: c_int
) -> *mut puzzles::tdq
{
    puzzles::tdq_new(
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tdq_free(
    tdq: *mut puzzles::tdq
)
{
    puzzles::tdq_free(
        tdq
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tdq_add(
    tdq: *mut puzzles::tdq,
    k: c_int
)
{
    puzzles::tdq_add(
        tdq,
        k
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tdq_remove(
    tdq: *mut puzzles::tdq
) -> c_int
{
    puzzles::tdq_remove(
        tdq
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tdq_fill(
    tdq: *mut puzzles::tdq
)
{
    puzzles::tdq_fill(
        tdq
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_domino_layout(
    w: c_int,
    h: c_int,
    rs: *mut puzzles::random_state
) -> *mut c_int
{
    puzzles::domino_layout(
        w,
        h,
        rs
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_domino_layout_prealloc(
    w: c_int,
    h: c_int,
    rs: *mut puzzles::random_state,
    grid: *mut c_int,
    grid2: *mut c_int,
    list: *mut c_int
)
{
    puzzles::domino_layout_prealloc(
        w,
        h,
        rs,
        grid,
        grid2,
        list
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_random_new(
    seed: *const c_char,
    len: c_int
) -> *mut puzzles::random_state
{
    puzzles::random_new(
        seed,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_random_copy(
    tocopy: *mut puzzles::random_state
) -> *mut puzzles::random_state
{
    puzzles::random_copy(
        tocopy
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_random_bits(
    state: *mut puzzles::random_state,
    bits: c_int
) -> c_ulong
{
    puzzles::random_bits(
        state,
        bits
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_random_upto(
    state: *mut puzzles::random_state,
    limit: c_ulong
) -> c_ulong
{
    puzzles::random_upto(
        state,
        limit
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_random_free(
    state: *mut puzzles::random_state
)
{
    puzzles::random_free(
        state
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_random_state_encode(
    state: *mut puzzles::random_state
) -> *mut c_char
{
    puzzles::random_state_encode(
        state
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_random_state_decode(
    input: *const c_char
) -> *mut puzzles::random_state
{
    puzzles::random_state_decode(
        input
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_SHA_Init(
    s: *mut puzzles::SHA_State
)
{
    puzzles::SHA_Init(
        s
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_SHA_Bytes(
    s: *mut puzzles::SHA_State,
    p: *const c_void,
    len: c_int
)
{
    puzzles::SHA_Bytes(
        s,
        p,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_SHA_Final(
    s: *mut puzzles::SHA_State,
    output: *mut c_uchar
)
{
    puzzles::SHA_Final(
        s,
        output
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_SHA_Simple(
    p: *const c_void,
    len: c_int,
    output: *mut c_uchar
)
{
    puzzles::SHA_Simple(
        p,
        len,
        output
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_document_new(
    pw: c_int,
    ph: c_int,
    userscale: puzzles::f32
) -> *mut puzzles::document
{
    puzzles::document_new(
        pw,
        ph,
        userscale
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_document_free(
    doc: *mut puzzles::document
)
{
    puzzles::document_free(
        doc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_document_add_puzzle(
    doc: *mut puzzles::document,
    game: *const puzzles::game,
    par: *mut puzzles::game_params,
    ui: *mut puzzles::game_ui,
    st: *mut puzzles::game_state,
    st2: *mut puzzles::game_state
)
{
    puzzles::document_add_puzzle(
        doc,
        game,
        par,
        ui,
        st,
        st2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_document_npages(
    doc: *const puzzles::document
) -> c_int
{
    puzzles::document_npages(
        doc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_document_begin(
    doc: *const puzzles::document,
    dr: *mut puzzles::drawing
)
{
    puzzles::document_begin(
        doc,
        dr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_document_end(
    doc: *const puzzles::document,
    dr: *mut puzzles::drawing
)
{
    puzzles::document_end(
        doc,
        dr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_document_print_page(
    doc: *const puzzles::document,
    dr: *mut puzzles::drawing,
    page_nr: c_int
)
{
    puzzles::document_print_page(
        doc,
        dr,
        page_nr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_document_print(
    doc: *const puzzles::document,
    dr: *mut puzzles::drawing
)
{
    puzzles::document_print(
        doc,
        dr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ps_init(
    outfile: *mut puzzles::FILE,
    colour: puzzles::bool
) -> *mut puzzles::psdata
{
    puzzles::ps_init(
        outfile,
        colour
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ps_free(
    ps: *mut puzzles::psdata
)
{
    puzzles::ps_free(
        ps
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ps_drawing_api(
    ps: *mut puzzles::psdata
) -> *mut puzzles::drawing
{
    puzzles::ps_drawing_api(
        ps
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_new_combi(
    r: c_int,
    n: c_int
) -> *mut puzzles::combi_ctx
{
    puzzles::new_combi(
        r,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_reset_combi(
    combi: *mut puzzles::combi_ctx
)
{
    puzzles::reset_combi(
        combi
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_next_combi(
    combi: *mut puzzles::combi_ctx
) -> *mut puzzles::combi_ctx
{
    puzzles::next_combi(
        combi
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_free_combi(
    combi: *mut puzzles::combi_ctx
)
{
    puzzles::free_combi(
        combi
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_divvy_rectangle(
    w: c_int,
    h: c_int,
    k: c_int,
    rs: *mut puzzles::random_state
) -> *mut puzzles::DSF
{
    puzzles::divvy_rectangle(
        w,
        h,
        k,
        rs
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_divvy_rectangle_attempt(
    w: c_int,
    h: c_int,
    k: c_int,
    rs: *mut puzzles::random_state
) -> *mut puzzles::DSF
{
    puzzles::divvy_rectangle_attempt(
        w,
        h,
        k,
        rs
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_findloop_new_state(
    nvertices: c_int
) -> *mut puzzles::findloopstate
{
    puzzles::findloop_new_state(
        nvertices
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_findloop_free_state(
    arg1: *mut puzzles::findloopstate
)
{
    puzzles::findloop_free_state(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_findloop_run(
    state: *mut puzzles::findloopstate,
    nvertices: c_int,
    neighbour: puzzles::neighbour_fn_t,
    ctx: *mut c_void
) -> puzzles::bool
{
    puzzles::findloop_run(
        state,
        nvertices,
        neighbour,
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_findloop_is_loop_edge(
    state: *mut puzzles::findloopstate,
    u: c_int,
    v: c_int
) -> puzzles::bool
{
    puzzles::findloop_is_loop_edge(
        state,
        u,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_findloop_is_bridge(
    pv: *mut puzzles::findloopstate,
    u: c_int,
    v: c_int,
    u_vertices: *mut c_int,
    v_vertices: *mut c_int
) -> puzzles::bool
{
    puzzles::findloop_is_bridge(
        pv,
        u,
        v,
        u_vertices,
        v_vertices
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_arraysort_fn(
    array: *mut c_void,
    nmemb: usize,
    size: usize,
    cmp: puzzles::arraysort_cmpfn_t,
    ctx: *mut c_void
)
{
    puzzles::arraysort_fn(
        array,
        nmemb,
        size,
        cmp,
        ctx
    )
}

    